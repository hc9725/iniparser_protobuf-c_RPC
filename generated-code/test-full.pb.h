// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test-full.proto

#ifndef PROTOBUF_test_2dfull_2eproto__INCLUDED
#define PROTOBUF_test_2dfull_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace foo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2dfull_2eproto();
void protobuf_AssignDesc_test_2dfull_2eproto();
void protobuf_ShutdownFile_test_2dfull_2eproto();

class SubMess;
class TestFieldNo15;
class TestFieldNo16;
class TestFieldNo2047;
class TestFieldNo2048;
class TestFieldNo262143;
class TestFieldNo262144;
class TestFieldNo33554431;
class TestFieldNo33554432;
class TestMess;
class TestMessPacked;
class TestMessOptional;
class TestMessRequiredInt32;
class TestMessRequiredSInt32;
class TestMessRequiredSFixed32;
class TestMessRequiredInt64;
class TestMessRequiredSInt64;
class TestMessRequiredSFixed64;
class TestMessRequiredUInt32;
class TestMessRequiredFixed32;
class TestMessRequiredUInt64;
class TestMessRequiredFixed64;
class TestMessRequiredFloat;
class TestMessRequiredDouble;
class TestMessRequiredBool;
class TestMessRequiredEnum;
class TestMessRequiredEnumSmall;
class TestMessRequiredString;
class TestMessRequiredBytes;
class TestMessRequiredMessage;
class EmptyMess;
class DefaultRequiredValues;
class DefaultOptionalValues;
class AllocValues;

enum TestEnumSmall {
  VALUE = 0,
  OTHER_VALUE = 1
};
bool TestEnumSmall_IsValid(int value);
const TestEnumSmall TestEnumSmall_MIN = VALUE;
const TestEnumSmall TestEnumSmall_MAX = OTHER_VALUE;
const int TestEnumSmall_ARRAYSIZE = TestEnumSmall_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestEnumSmall_descriptor();
inline const ::std::string& TestEnumSmall_Name(TestEnumSmall value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestEnumSmall_descriptor(), value);
}
inline bool TestEnumSmall_Parse(
    const ::std::string& name, TestEnumSmall* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestEnumSmall>(
    TestEnumSmall_descriptor(), name, value);
}
enum TestEnum {
  VALUE0 = 0,
  VALUE1 = 1,
  VALUE127 = 127,
  VALUE128 = 128,
  VALUE16383 = 16383,
  VALUE16384 = 16384,
  VALUE2097151 = 2097151,
  VALUE2097152 = 2097152,
  VALUE268435455 = 268435455,
  VALUE268435456 = 268435456
};
bool TestEnum_IsValid(int value);
const TestEnum TestEnum_MIN = VALUE0;
const TestEnum TestEnum_MAX = VALUE268435456;
const int TestEnum_ARRAYSIZE = TestEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestEnum_descriptor();
inline const ::std::string& TestEnum_Name(TestEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestEnum_descriptor(), value);
}
inline bool TestEnum_Parse(
    const ::std::string& name, TestEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestEnum>(
    TestEnum_descriptor(), name, value);
}
enum TestEnumDupValues {
  VALUE_A = 42,
  VALUE_B = 42,
  VALUE_C = 42,
  VALUE_D = 666,
  VALUE_E = 666,
  VALUE_F = 1000,
  VALUE_AA = 1000,
  VALUE_BB = 1001
};
bool TestEnumDupValues_IsValid(int value);
const TestEnumDupValues TestEnumDupValues_MIN = VALUE_A;
const TestEnumDupValues TestEnumDupValues_MAX = VALUE_BB;
const int TestEnumDupValues_ARRAYSIZE = TestEnumDupValues_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestEnumDupValues_descriptor();
inline const ::std::string& TestEnumDupValues_Name(TestEnumDupValues value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestEnumDupValues_descriptor(), value);
}
inline bool TestEnumDupValues_Parse(
    const ::std::string& name, TestEnumDupValues* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestEnumDupValues>(
    TestEnumDupValues_descriptor(), name, value);
}
// ===================================================================

class SubMess : public ::google::protobuf::Message {
 public:
  SubMess();
  virtual ~SubMess();
  
  SubMess(const SubMess& from);
  
  inline SubMess& operator=(const SubMess& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubMess& default_instance();
  
  void Swap(SubMess* other);
  
  // implements Message ----------------------------------------------
  
  SubMess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubMess& from);
  void MergeFrom(const SubMess& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 test = 4;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 4;
  inline ::google::protobuf::int32 test() const;
  inline void set_test(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:foo.SubMess)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static SubMess* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo15 : public ::google::protobuf::Message {
 public:
  TestFieldNo15();
  virtual ~TestFieldNo15();
  
  TestFieldNo15(const TestFieldNo15& from);
  
  inline TestFieldNo15& operator=(const TestFieldNo15& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo15& default_instance();
  
  void Swap(TestFieldNo15* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo15* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo15& from);
  void MergeFrom(const TestFieldNo15& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 15;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 15;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo15)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo15* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo16 : public ::google::protobuf::Message {
 public:
  TestFieldNo16();
  virtual ~TestFieldNo16();
  
  TestFieldNo16(const TestFieldNo16& from);
  
  inline TestFieldNo16& operator=(const TestFieldNo16& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo16& default_instance();
  
  void Swap(TestFieldNo16* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo16* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo16& from);
  void MergeFrom(const TestFieldNo16& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 16;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 16;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo16)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo16* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo2047 : public ::google::protobuf::Message {
 public:
  TestFieldNo2047();
  virtual ~TestFieldNo2047();
  
  TestFieldNo2047(const TestFieldNo2047& from);
  
  inline TestFieldNo2047& operator=(const TestFieldNo2047& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo2047& default_instance();
  
  void Swap(TestFieldNo2047* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo2047* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo2047& from);
  void MergeFrom(const TestFieldNo2047& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 2047;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 2047;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo2047)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo2047* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo2048 : public ::google::protobuf::Message {
 public:
  TestFieldNo2048();
  virtual ~TestFieldNo2048();
  
  TestFieldNo2048(const TestFieldNo2048& from);
  
  inline TestFieldNo2048& operator=(const TestFieldNo2048& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo2048& default_instance();
  
  void Swap(TestFieldNo2048* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo2048* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo2048& from);
  void MergeFrom(const TestFieldNo2048& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 2048;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 2048;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo2048)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo2048* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo262143 : public ::google::protobuf::Message {
 public:
  TestFieldNo262143();
  virtual ~TestFieldNo262143();
  
  TestFieldNo262143(const TestFieldNo262143& from);
  
  inline TestFieldNo262143& operator=(const TestFieldNo262143& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo262143& default_instance();
  
  void Swap(TestFieldNo262143* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo262143* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo262143& from);
  void MergeFrom(const TestFieldNo262143& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 262143;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 262143;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo262143)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo262143* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo262144 : public ::google::protobuf::Message {
 public:
  TestFieldNo262144();
  virtual ~TestFieldNo262144();
  
  TestFieldNo262144(const TestFieldNo262144& from);
  
  inline TestFieldNo262144& operator=(const TestFieldNo262144& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo262144& default_instance();
  
  void Swap(TestFieldNo262144* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo262144* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo262144& from);
  void MergeFrom(const TestFieldNo262144& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 262144;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 262144;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo262144)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo262144* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo33554431 : public ::google::protobuf::Message {
 public:
  TestFieldNo33554431();
  virtual ~TestFieldNo33554431();
  
  TestFieldNo33554431(const TestFieldNo33554431& from);
  
  inline TestFieldNo33554431& operator=(const TestFieldNo33554431& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo33554431& default_instance();
  
  void Swap(TestFieldNo33554431* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo33554431* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo33554431& from);
  void MergeFrom(const TestFieldNo33554431& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 33554431;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 33554431;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo33554431)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo33554431* default_instance_;
};
// -------------------------------------------------------------------

class TestFieldNo33554432 : public ::google::protobuf::Message {
 public:
  TestFieldNo33554432();
  virtual ~TestFieldNo33554432();
  
  TestFieldNo33554432(const TestFieldNo33554432& from);
  
  inline TestFieldNo33554432& operator=(const TestFieldNo33554432& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFieldNo33554432& default_instance();
  
  void Swap(TestFieldNo33554432* other);
  
  // implements Message ----------------------------------------------
  
  TestFieldNo33554432* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestFieldNo33554432& from);
  void MergeFrom(const TestFieldNo33554432& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 33554432;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 33554432;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestFieldNo33554432)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestFieldNo33554432* default_instance_;
};
// -------------------------------------------------------------------

class TestMess : public ::google::protobuf::Message {
 public:
  TestMess();
  virtual ~TestMess();
  
  TestMess(const TestMess& from);
  
  inline TestMess& operator=(const TestMess& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMess& default_instance();
  
  void Swap(TestMess* other);
  
  // implements Message ----------------------------------------------
  
  TestMess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMess& from);
  void MergeFrom(const TestMess& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 test_int32 = 1;
  inline int test_int32_size() const;
  inline void clear_test_int32();
  static const int kTestInt32FieldNumber = 1;
  inline ::google::protobuf::int32 test_int32(int index) const;
  inline void set_test_int32(int index, ::google::protobuf::int32 value);
  inline void add_test_int32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int32();
  
  // repeated sint32 test_sint32 = 2;
  inline int test_sint32_size() const;
  inline void clear_test_sint32();
  static const int kTestSint32FieldNumber = 2;
  inline ::google::protobuf::int32 test_sint32(int index) const;
  inline void set_test_sint32(int index, ::google::protobuf::int32 value);
  inline void add_test_sint32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_sint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_sint32();
  
  // repeated sfixed32 test_sfixed32 = 3;
  inline int test_sfixed32_size() const;
  inline void clear_test_sfixed32();
  static const int kTestSfixed32FieldNumber = 3;
  inline ::google::protobuf::int32 test_sfixed32(int index) const;
  inline void set_test_sfixed32(int index, ::google::protobuf::int32 value);
  inline void add_test_sfixed32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_sfixed32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_sfixed32();
  
  // repeated int64 test_int64 = 4;
  inline int test_int64_size() const;
  inline void clear_test_int64();
  static const int kTestInt64FieldNumber = 4;
  inline ::google::protobuf::int64 test_int64(int index) const;
  inline void set_test_int64(int index, ::google::protobuf::int64 value);
  inline void add_test_int64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      test_int64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_test_int64();
  
  // repeated sint64 test_sint64 = 5;
  inline int test_sint64_size() const;
  inline void clear_test_sint64();
  static const int kTestSint64FieldNumber = 5;
  inline ::google::protobuf::int64 test_sint64(int index) const;
  inline void set_test_sint64(int index, ::google::protobuf::int64 value);
  inline void add_test_sint64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      test_sint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_test_sint64();
  
  // repeated sfixed64 test_sfixed64 = 6;
  inline int test_sfixed64_size() const;
  inline void clear_test_sfixed64();
  static const int kTestSfixed64FieldNumber = 6;
  inline ::google::protobuf::int64 test_sfixed64(int index) const;
  inline void set_test_sfixed64(int index, ::google::protobuf::int64 value);
  inline void add_test_sfixed64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      test_sfixed64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_test_sfixed64();
  
  // repeated uint32 test_uint32 = 7;
  inline int test_uint32_size() const;
  inline void clear_test_uint32();
  static const int kTestUint32FieldNumber = 7;
  inline ::google::protobuf::uint32 test_uint32(int index) const;
  inline void set_test_uint32(int index, ::google::protobuf::uint32 value);
  inline void add_test_uint32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      test_uint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_test_uint32();
  
  // repeated fixed32 test_fixed32 = 8;
  inline int test_fixed32_size() const;
  inline void clear_test_fixed32();
  static const int kTestFixed32FieldNumber = 8;
  inline ::google::protobuf::uint32 test_fixed32(int index) const;
  inline void set_test_fixed32(int index, ::google::protobuf::uint32 value);
  inline void add_test_fixed32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      test_fixed32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_test_fixed32();
  
  // repeated uint64 test_uint64 = 9;
  inline int test_uint64_size() const;
  inline void clear_test_uint64();
  static const int kTestUint64FieldNumber = 9;
  inline ::google::protobuf::uint64 test_uint64(int index) const;
  inline void set_test_uint64(int index, ::google::protobuf::uint64 value);
  inline void add_test_uint64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      test_uint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_test_uint64();
  
  // repeated fixed64 test_fixed64 = 10;
  inline int test_fixed64_size() const;
  inline void clear_test_fixed64();
  static const int kTestFixed64FieldNumber = 10;
  inline ::google::protobuf::uint64 test_fixed64(int index) const;
  inline void set_test_fixed64(int index, ::google::protobuf::uint64 value);
  inline void add_test_fixed64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      test_fixed64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_test_fixed64();
  
  // repeated float test_float = 11;
  inline int test_float_size() const;
  inline void clear_test_float();
  static const int kTestFloatFieldNumber = 11;
  inline float test_float(int index) const;
  inline void set_test_float(int index, float value);
  inline void add_test_float(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      test_float() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_test_float();
  
  // repeated double test_double = 12;
  inline int test_double_size() const;
  inline void clear_test_double();
  static const int kTestDoubleFieldNumber = 12;
  inline double test_double(int index) const;
  inline void set_test_double(int index, double value);
  inline void add_test_double(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      test_double() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_test_double();
  
  // repeated bool test_boolean = 13;
  inline int test_boolean_size() const;
  inline void clear_test_boolean();
  static const int kTestBooleanFieldNumber = 13;
  inline bool test_boolean(int index) const;
  inline void set_test_boolean(int index, bool value);
  inline void add_test_boolean(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      test_boolean() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_test_boolean();
  
  // repeated .foo.TestEnumSmall test_enum_small = 14;
  inline int test_enum_small_size() const;
  inline void clear_test_enum_small();
  static const int kTestEnumSmallFieldNumber = 14;
  inline foo::TestEnumSmall test_enum_small(int index) const;
  inline void set_test_enum_small(int index, foo::TestEnumSmall value);
  inline void add_test_enum_small(foo::TestEnumSmall value);
  inline const ::google::protobuf::RepeatedField<int>& test_enum_small() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_test_enum_small();
  
  // repeated .foo.TestEnum test_enum = 15;
  inline int test_enum_size() const;
  inline void clear_test_enum();
  static const int kTestEnumFieldNumber = 15;
  inline foo::TestEnum test_enum(int index) const;
  inline void set_test_enum(int index, foo::TestEnum value);
  inline void add_test_enum(foo::TestEnum value);
  inline const ::google::protobuf::RepeatedField<int>& test_enum() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_test_enum();
  
  // repeated string test_string = 16;
  inline int test_string_size() const;
  inline void clear_test_string();
  static const int kTestStringFieldNumber = 16;
  inline const ::std::string& test_string(int index) const;
  inline ::std::string* mutable_test_string(int index);
  inline void set_test_string(int index, const ::std::string& value);
  inline void set_test_string(int index, const char* value);
  inline void set_test_string(int index, const char* value, size_t size);
  inline ::std::string* add_test_string();
  inline void add_test_string(const ::std::string& value);
  inline void add_test_string(const char* value);
  inline void add_test_string(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string();
  
  // repeated bytes test_bytes = 17;
  inline int test_bytes_size() const;
  inline void clear_test_bytes();
  static const int kTestBytesFieldNumber = 17;
  inline const ::std::string& test_bytes(int index) const;
  inline ::std::string* mutable_test_bytes(int index);
  inline void set_test_bytes(int index, const ::std::string& value);
  inline void set_test_bytes(int index, const char* value);
  inline void set_test_bytes(int index, const void* value, size_t size);
  inline ::std::string* add_test_bytes();
  inline void add_test_bytes(const ::std::string& value);
  inline void add_test_bytes(const char* value);
  inline void add_test_bytes(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes();
  
  // repeated .foo.SubMess test_message = 18;
  inline int test_message_size() const;
  inline void clear_test_message();
  static const int kTestMessageFieldNumber = 18;
  inline const ::foo::SubMess& test_message(int index) const;
  inline ::foo::SubMess* mutable_test_message(int index);
  inline ::foo::SubMess* add_test_message();
  inline const ::google::protobuf::RepeatedPtrField< ::foo::SubMess >&
      test_message() const;
  inline ::google::protobuf::RepeatedPtrField< ::foo::SubMess >*
      mutable_test_message();
  
  // @@protoc_insertion_point(class_scope:foo.TestMess)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_sint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_sfixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > test_int64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > test_sint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > test_sfixed64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > test_uint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > test_fixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > test_uint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > test_fixed64_;
  ::google::protobuf::RepeatedField< float > test_float_;
  ::google::protobuf::RepeatedField< double > test_double_;
  ::google::protobuf::RepeatedField< bool > test_boolean_;
  ::google::protobuf::RepeatedField<int> test_enum_small_;
  ::google::protobuf::RepeatedField<int> test_enum_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_;
  ::google::protobuf::RepeatedPtrField< ::foo::SubMess > test_message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMess* default_instance_;
};
// -------------------------------------------------------------------

class TestMessPacked : public ::google::protobuf::Message {
 public:
  TestMessPacked();
  virtual ~TestMessPacked();
  
  TestMessPacked(const TestMessPacked& from);
  
  inline TestMessPacked& operator=(const TestMessPacked& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessPacked& default_instance();
  
  void Swap(TestMessPacked* other);
  
  // implements Message ----------------------------------------------
  
  TestMessPacked* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessPacked& from);
  void MergeFrom(const TestMessPacked& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 test_int32 = 1 [packed = true];
  inline int test_int32_size() const;
  inline void clear_test_int32();
  static const int kTestInt32FieldNumber = 1;
  inline ::google::protobuf::int32 test_int32(int index) const;
  inline void set_test_int32(int index, ::google::protobuf::int32 value);
  inline void add_test_int32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int32();
  
  // repeated sint32 test_sint32 = 2 [packed = true];
  inline int test_sint32_size() const;
  inline void clear_test_sint32();
  static const int kTestSint32FieldNumber = 2;
  inline ::google::protobuf::int32 test_sint32(int index) const;
  inline void set_test_sint32(int index, ::google::protobuf::int32 value);
  inline void add_test_sint32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_sint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_sint32();
  
  // repeated sfixed32 test_sfixed32 = 3 [packed = true];
  inline int test_sfixed32_size() const;
  inline void clear_test_sfixed32();
  static const int kTestSfixed32FieldNumber = 3;
  inline ::google::protobuf::int32 test_sfixed32(int index) const;
  inline void set_test_sfixed32(int index, ::google::protobuf::int32 value);
  inline void add_test_sfixed32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_sfixed32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_sfixed32();
  
  // repeated int64 test_int64 = 4 [packed = true];
  inline int test_int64_size() const;
  inline void clear_test_int64();
  static const int kTestInt64FieldNumber = 4;
  inline ::google::protobuf::int64 test_int64(int index) const;
  inline void set_test_int64(int index, ::google::protobuf::int64 value);
  inline void add_test_int64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      test_int64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_test_int64();
  
  // repeated sint64 test_sint64 = 5 [packed = true];
  inline int test_sint64_size() const;
  inline void clear_test_sint64();
  static const int kTestSint64FieldNumber = 5;
  inline ::google::protobuf::int64 test_sint64(int index) const;
  inline void set_test_sint64(int index, ::google::protobuf::int64 value);
  inline void add_test_sint64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      test_sint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_test_sint64();
  
  // repeated sfixed64 test_sfixed64 = 6 [packed = true];
  inline int test_sfixed64_size() const;
  inline void clear_test_sfixed64();
  static const int kTestSfixed64FieldNumber = 6;
  inline ::google::protobuf::int64 test_sfixed64(int index) const;
  inline void set_test_sfixed64(int index, ::google::protobuf::int64 value);
  inline void add_test_sfixed64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      test_sfixed64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_test_sfixed64();
  
  // repeated uint32 test_uint32 = 7 [packed = true];
  inline int test_uint32_size() const;
  inline void clear_test_uint32();
  static const int kTestUint32FieldNumber = 7;
  inline ::google::protobuf::uint32 test_uint32(int index) const;
  inline void set_test_uint32(int index, ::google::protobuf::uint32 value);
  inline void add_test_uint32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      test_uint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_test_uint32();
  
  // repeated fixed32 test_fixed32 = 8 [packed = true];
  inline int test_fixed32_size() const;
  inline void clear_test_fixed32();
  static const int kTestFixed32FieldNumber = 8;
  inline ::google::protobuf::uint32 test_fixed32(int index) const;
  inline void set_test_fixed32(int index, ::google::protobuf::uint32 value);
  inline void add_test_fixed32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      test_fixed32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_test_fixed32();
  
  // repeated uint64 test_uint64 = 9 [packed = true];
  inline int test_uint64_size() const;
  inline void clear_test_uint64();
  static const int kTestUint64FieldNumber = 9;
  inline ::google::protobuf::uint64 test_uint64(int index) const;
  inline void set_test_uint64(int index, ::google::protobuf::uint64 value);
  inline void add_test_uint64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      test_uint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_test_uint64();
  
  // repeated fixed64 test_fixed64 = 10 [packed = true];
  inline int test_fixed64_size() const;
  inline void clear_test_fixed64();
  static const int kTestFixed64FieldNumber = 10;
  inline ::google::protobuf::uint64 test_fixed64(int index) const;
  inline void set_test_fixed64(int index, ::google::protobuf::uint64 value);
  inline void add_test_fixed64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      test_fixed64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_test_fixed64();
  
  // repeated float test_float = 11 [packed = true];
  inline int test_float_size() const;
  inline void clear_test_float();
  static const int kTestFloatFieldNumber = 11;
  inline float test_float(int index) const;
  inline void set_test_float(int index, float value);
  inline void add_test_float(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      test_float() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_test_float();
  
  // repeated double test_double = 12 [packed = true];
  inline int test_double_size() const;
  inline void clear_test_double();
  static const int kTestDoubleFieldNumber = 12;
  inline double test_double(int index) const;
  inline void set_test_double(int index, double value);
  inline void add_test_double(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      test_double() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_test_double();
  
  // repeated bool test_boolean = 13 [packed = true];
  inline int test_boolean_size() const;
  inline void clear_test_boolean();
  static const int kTestBooleanFieldNumber = 13;
  inline bool test_boolean(int index) const;
  inline void set_test_boolean(int index, bool value);
  inline void add_test_boolean(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      test_boolean() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_test_boolean();
  
  // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
  inline int test_enum_small_size() const;
  inline void clear_test_enum_small();
  static const int kTestEnumSmallFieldNumber = 14;
  inline foo::TestEnumSmall test_enum_small(int index) const;
  inline void set_test_enum_small(int index, foo::TestEnumSmall value);
  inline void add_test_enum_small(foo::TestEnumSmall value);
  inline const ::google::protobuf::RepeatedField<int>& test_enum_small() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_test_enum_small();
  
  // repeated .foo.TestEnum test_enum = 15 [packed = true];
  inline int test_enum_size() const;
  inline void clear_test_enum();
  static const int kTestEnumFieldNumber = 15;
  inline foo::TestEnum test_enum(int index) const;
  inline void set_test_enum(int index, foo::TestEnum value);
  inline void add_test_enum(foo::TestEnum value);
  inline const ::google::protobuf::RepeatedField<int>& test_enum() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_test_enum();
  
  // @@protoc_insertion_point(class_scope:foo.TestMessPacked)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int32_;
  mutable int _test_int32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_sint32_;
  mutable int _test_sint32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_sfixed32_;
  mutable int _test_sfixed32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > test_int64_;
  mutable int _test_int64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > test_sint64_;
  mutable int _test_sint64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > test_sfixed64_;
  mutable int _test_sfixed64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > test_uint32_;
  mutable int _test_uint32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > test_fixed32_;
  mutable int _test_fixed32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > test_uint64_;
  mutable int _test_uint64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > test_fixed64_;
  mutable int _test_fixed64_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > test_float_;
  mutable int _test_float_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > test_double_;
  mutable int _test_double_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > test_boolean_;
  mutable int _test_boolean_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> test_enum_small_;
  mutable int _test_enum_small_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> test_enum_;
  mutable int _test_enum_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessPacked* default_instance_;
};
// -------------------------------------------------------------------

class TestMessOptional : public ::google::protobuf::Message {
 public:
  TestMessOptional();
  virtual ~TestMessOptional();
  
  TestMessOptional(const TestMessOptional& from);
  
  inline TestMessOptional& operator=(const TestMessOptional& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessOptional& default_instance();
  
  void Swap(TestMessOptional* other);
  
  // implements Message ----------------------------------------------
  
  TestMessOptional* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessOptional& from);
  void MergeFrom(const TestMessOptional& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 test_int32 = 1;
  inline bool has_test_int32() const;
  inline void clear_test_int32();
  static const int kTestInt32FieldNumber = 1;
  inline ::google::protobuf::int32 test_int32() const;
  inline void set_test_int32(::google::protobuf::int32 value);
  
  // optional sint32 test_sint32 = 2;
  inline bool has_test_sint32() const;
  inline void clear_test_sint32();
  static const int kTestSint32FieldNumber = 2;
  inline ::google::protobuf::int32 test_sint32() const;
  inline void set_test_sint32(::google::protobuf::int32 value);
  
  // optional sfixed32 test_sfixed32 = 3;
  inline bool has_test_sfixed32() const;
  inline void clear_test_sfixed32();
  static const int kTestSfixed32FieldNumber = 3;
  inline ::google::protobuf::int32 test_sfixed32() const;
  inline void set_test_sfixed32(::google::protobuf::int32 value);
  
  // optional int64 test_int64 = 4;
  inline bool has_test_int64() const;
  inline void clear_test_int64();
  static const int kTestInt64FieldNumber = 4;
  inline ::google::protobuf::int64 test_int64() const;
  inline void set_test_int64(::google::protobuf::int64 value);
  
  // optional sint64 test_sint64 = 5;
  inline bool has_test_sint64() const;
  inline void clear_test_sint64();
  static const int kTestSint64FieldNumber = 5;
  inline ::google::protobuf::int64 test_sint64() const;
  inline void set_test_sint64(::google::protobuf::int64 value);
  
  // optional sfixed64 test_sfixed64 = 6;
  inline bool has_test_sfixed64() const;
  inline void clear_test_sfixed64();
  static const int kTestSfixed64FieldNumber = 6;
  inline ::google::protobuf::int64 test_sfixed64() const;
  inline void set_test_sfixed64(::google::protobuf::int64 value);
  
  // optional uint32 test_uint32 = 7;
  inline bool has_test_uint32() const;
  inline void clear_test_uint32();
  static const int kTestUint32FieldNumber = 7;
  inline ::google::protobuf::uint32 test_uint32() const;
  inline void set_test_uint32(::google::protobuf::uint32 value);
  
  // optional fixed32 test_fixed32 = 8;
  inline bool has_test_fixed32() const;
  inline void clear_test_fixed32();
  static const int kTestFixed32FieldNumber = 8;
  inline ::google::protobuf::uint32 test_fixed32() const;
  inline void set_test_fixed32(::google::protobuf::uint32 value);
  
  // optional uint64 test_uint64 = 9;
  inline bool has_test_uint64() const;
  inline void clear_test_uint64();
  static const int kTestUint64FieldNumber = 9;
  inline ::google::protobuf::uint64 test_uint64() const;
  inline void set_test_uint64(::google::protobuf::uint64 value);
  
  // optional fixed64 test_fixed64 = 10;
  inline bool has_test_fixed64() const;
  inline void clear_test_fixed64();
  static const int kTestFixed64FieldNumber = 10;
  inline ::google::protobuf::uint64 test_fixed64() const;
  inline void set_test_fixed64(::google::protobuf::uint64 value);
  
  // optional float test_float = 11;
  inline bool has_test_float() const;
  inline void clear_test_float();
  static const int kTestFloatFieldNumber = 11;
  inline float test_float() const;
  inline void set_test_float(float value);
  
  // optional double test_double = 12;
  inline bool has_test_double() const;
  inline void clear_test_double();
  static const int kTestDoubleFieldNumber = 12;
  inline double test_double() const;
  inline void set_test_double(double value);
  
  // optional bool test_boolean = 13;
  inline bool has_test_boolean() const;
  inline void clear_test_boolean();
  static const int kTestBooleanFieldNumber = 13;
  inline bool test_boolean() const;
  inline void set_test_boolean(bool value);
  
  // optional .foo.TestEnumSmall test_enum_small = 14;
  inline bool has_test_enum_small() const;
  inline void clear_test_enum_small();
  static const int kTestEnumSmallFieldNumber = 14;
  inline foo::TestEnumSmall test_enum_small() const;
  inline void set_test_enum_small(foo::TestEnumSmall value);
  
  // optional .foo.TestEnum test_enum = 15;
  inline bool has_test_enum() const;
  inline void clear_test_enum();
  static const int kTestEnumFieldNumber = 15;
  inline foo::TestEnum test_enum() const;
  inline void set_test_enum(foo::TestEnum value);
  
  // optional string test_string = 16;
  inline bool has_test_string() const;
  inline void clear_test_string();
  static const int kTestStringFieldNumber = 16;
  inline const ::std::string& test_string() const;
  inline void set_test_string(const ::std::string& value);
  inline void set_test_string(const char* value);
  inline void set_test_string(const char* value, size_t size);
  inline ::std::string* mutable_test_string();
  inline ::std::string* release_test_string();
  
  // optional bytes test_bytes = 17;
  inline bool has_test_bytes() const;
  inline void clear_test_bytes();
  static const int kTestBytesFieldNumber = 17;
  inline const ::std::string& test_bytes() const;
  inline void set_test_bytes(const ::std::string& value);
  inline void set_test_bytes(const char* value);
  inline void set_test_bytes(const void* value, size_t size);
  inline ::std::string* mutable_test_bytes();
  inline ::std::string* release_test_bytes();
  
  // optional .foo.SubMess test_message = 18;
  inline bool has_test_message() const;
  inline void clear_test_message();
  static const int kTestMessageFieldNumber = 18;
  inline const ::foo::SubMess& test_message() const;
  inline ::foo::SubMess* mutable_test_message();
  inline ::foo::SubMess* release_test_message();
  
  // @@protoc_insertion_point(class_scope:foo.TestMessOptional)
 private:
  inline void set_has_test_int32();
  inline void clear_has_test_int32();
  inline void set_has_test_sint32();
  inline void clear_has_test_sint32();
  inline void set_has_test_sfixed32();
  inline void clear_has_test_sfixed32();
  inline void set_has_test_int64();
  inline void clear_has_test_int64();
  inline void set_has_test_sint64();
  inline void clear_has_test_sint64();
  inline void set_has_test_sfixed64();
  inline void clear_has_test_sfixed64();
  inline void set_has_test_uint32();
  inline void clear_has_test_uint32();
  inline void set_has_test_fixed32();
  inline void clear_has_test_fixed32();
  inline void set_has_test_uint64();
  inline void clear_has_test_uint64();
  inline void set_has_test_fixed64();
  inline void clear_has_test_fixed64();
  inline void set_has_test_float();
  inline void clear_has_test_float();
  inline void set_has_test_double();
  inline void clear_has_test_double();
  inline void set_has_test_boolean();
  inline void clear_has_test_boolean();
  inline void set_has_test_enum_small();
  inline void clear_has_test_enum_small();
  inline void set_has_test_enum();
  inline void clear_has_test_enum();
  inline void set_has_test_string();
  inline void clear_has_test_string();
  inline void set_has_test_bytes();
  inline void clear_has_test_bytes();
  inline void set_has_test_message();
  inline void clear_has_test_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 test_int32_;
  ::google::protobuf::int32 test_sint32_;
  ::google::protobuf::int64 test_int64_;
  ::google::protobuf::int64 test_sint64_;
  ::google::protobuf::int32 test_sfixed32_;
  ::google::protobuf::uint32 test_uint32_;
  ::google::protobuf::int64 test_sfixed64_;
  ::google::protobuf::uint64 test_uint64_;
  ::google::protobuf::uint32 test_fixed32_;
  float test_float_;
  ::google::protobuf::uint64 test_fixed64_;
  double test_double_;
  bool test_boolean_;
  int test_enum_small_;
  ::std::string* test_string_;
  ::std::string* test_bytes_;
  ::foo::SubMess* test_message_;
  int test_enum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessOptional* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredInt32 : public ::google::protobuf::Message {
 public:
  TestMessRequiredInt32();
  virtual ~TestMessRequiredInt32();
  
  TestMessRequiredInt32(const TestMessRequiredInt32& from);
  
  inline TestMessRequiredInt32& operator=(const TestMessRequiredInt32& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredInt32& default_instance();
  
  void Swap(TestMessRequiredInt32* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredInt32& from);
  void MergeFrom(const TestMessRequiredInt32& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 test = 42;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 42;
  inline ::google::protobuf::int32 test() const;
  inline void set_test(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredInt32)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredInt32* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredSInt32 : public ::google::protobuf::Message {
 public:
  TestMessRequiredSInt32();
  virtual ~TestMessRequiredSInt32();
  
  TestMessRequiredSInt32(const TestMessRequiredSInt32& from);
  
  inline TestMessRequiredSInt32& operator=(const TestMessRequiredSInt32& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredSInt32& default_instance();
  
  void Swap(TestMessRequiredSInt32* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredSInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredSInt32& from);
  void MergeFrom(const TestMessRequiredSInt32& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 test = 43;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 43;
  inline ::google::protobuf::int32 test() const;
  inline void set_test(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredSInt32)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredSInt32* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredSFixed32 : public ::google::protobuf::Message {
 public:
  TestMessRequiredSFixed32();
  virtual ~TestMessRequiredSFixed32();
  
  TestMessRequiredSFixed32(const TestMessRequiredSFixed32& from);
  
  inline TestMessRequiredSFixed32& operator=(const TestMessRequiredSFixed32& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredSFixed32& default_instance();
  
  void Swap(TestMessRequiredSFixed32* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredSFixed32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredSFixed32& from);
  void MergeFrom(const TestMessRequiredSFixed32& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sfixed32 test = 100;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 100;
  inline ::google::protobuf::int32 test() const;
  inline void set_test(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredSFixed32)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredSFixed32* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredInt64 : public ::google::protobuf::Message {
 public:
  TestMessRequiredInt64();
  virtual ~TestMessRequiredInt64();
  
  TestMessRequiredInt64(const TestMessRequiredInt64& from);
  
  inline TestMessRequiredInt64& operator=(const TestMessRequiredInt64& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredInt64& default_instance();
  
  void Swap(TestMessRequiredInt64* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredInt64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredInt64& from);
  void MergeFrom(const TestMessRequiredInt64& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline ::google::protobuf::int64 test() const;
  inline void set_test(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredInt64)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredInt64* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredSInt64 : public ::google::protobuf::Message {
 public:
  TestMessRequiredSInt64();
  virtual ~TestMessRequiredSInt64();
  
  TestMessRequiredSInt64(const TestMessRequiredSInt64& from);
  
  inline TestMessRequiredSInt64& operator=(const TestMessRequiredSInt64& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredSInt64& default_instance();
  
  void Swap(TestMessRequiredSInt64* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredSInt64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredSInt64& from);
  void MergeFrom(const TestMessRequiredSInt64& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 test = 11;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 11;
  inline ::google::protobuf::int64 test() const;
  inline void set_test(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredSInt64)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredSInt64* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredSFixed64 : public ::google::protobuf::Message {
 public:
  TestMessRequiredSFixed64();
  virtual ~TestMessRequiredSFixed64();
  
  TestMessRequiredSFixed64(const TestMessRequiredSFixed64& from);
  
  inline TestMessRequiredSFixed64& operator=(const TestMessRequiredSFixed64& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredSFixed64& default_instance();
  
  void Swap(TestMessRequiredSFixed64* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredSFixed64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredSFixed64& from);
  void MergeFrom(const TestMessRequiredSFixed64& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sfixed64 test = 12;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 12;
  inline ::google::protobuf::int64 test() const;
  inline void set_test(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredSFixed64)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredSFixed64* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredUInt32 : public ::google::protobuf::Message {
 public:
  TestMessRequiredUInt32();
  virtual ~TestMessRequiredUInt32();
  
  TestMessRequiredUInt32(const TestMessRequiredUInt32& from);
  
  inline TestMessRequiredUInt32& operator=(const TestMessRequiredUInt32& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredUInt32& default_instance();
  
  void Swap(TestMessRequiredUInt32* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredUInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredUInt32& from);
  void MergeFrom(const TestMessRequiredUInt32& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline ::google::protobuf::uint32 test() const;
  inline void set_test(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredUInt32)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredUInt32* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredFixed32 : public ::google::protobuf::Message {
 public:
  TestMessRequiredFixed32();
  virtual ~TestMessRequiredFixed32();
  
  TestMessRequiredFixed32(const TestMessRequiredFixed32& from);
  
  inline TestMessRequiredFixed32& operator=(const TestMessRequiredFixed32& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredFixed32& default_instance();
  
  void Swap(TestMessRequiredFixed32* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredFixed32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredFixed32& from);
  void MergeFrom(const TestMessRequiredFixed32& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed32 test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline ::google::protobuf::uint32 test() const;
  inline void set_test(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredFixed32)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredFixed32* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredUInt64 : public ::google::protobuf::Message {
 public:
  TestMessRequiredUInt64();
  virtual ~TestMessRequiredUInt64();
  
  TestMessRequiredUInt64(const TestMessRequiredUInt64& from);
  
  inline TestMessRequiredUInt64& operator=(const TestMessRequiredUInt64& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredUInt64& default_instance();
  
  void Swap(TestMessRequiredUInt64* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredUInt64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredUInt64& from);
  void MergeFrom(const TestMessRequiredUInt64& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline ::google::protobuf::uint64 test() const;
  inline void set_test(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredUInt64)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredUInt64* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredFixed64 : public ::google::protobuf::Message {
 public:
  TestMessRequiredFixed64();
  virtual ~TestMessRequiredFixed64();
  
  TestMessRequiredFixed64(const TestMessRequiredFixed64& from);
  
  inline TestMessRequiredFixed64& operator=(const TestMessRequiredFixed64& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredFixed64& default_instance();
  
  void Swap(TestMessRequiredFixed64* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredFixed64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredFixed64& from);
  void MergeFrom(const TestMessRequiredFixed64& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline ::google::protobuf::uint64 test() const;
  inline void set_test(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredFixed64)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredFixed64* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredFloat : public ::google::protobuf::Message {
 public:
  TestMessRequiredFloat();
  virtual ~TestMessRequiredFloat();
  
  TestMessRequiredFloat(const TestMessRequiredFloat& from);
  
  inline TestMessRequiredFloat& operator=(const TestMessRequiredFloat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredFloat& default_instance();
  
  void Swap(TestMessRequiredFloat* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredFloat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredFloat& from);
  void MergeFrom(const TestMessRequiredFloat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline float test() const;
  inline void set_test(float value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredFloat)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredFloat* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredDouble : public ::google::protobuf::Message {
 public:
  TestMessRequiredDouble();
  virtual ~TestMessRequiredDouble();
  
  TestMessRequiredDouble(const TestMessRequiredDouble& from);
  
  inline TestMessRequiredDouble& operator=(const TestMessRequiredDouble& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredDouble& default_instance();
  
  void Swap(TestMessRequiredDouble* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredDouble* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredDouble& from);
  void MergeFrom(const TestMessRequiredDouble& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline double test() const;
  inline void set_test(double value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredDouble)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredDouble* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredBool : public ::google::protobuf::Message {
 public:
  TestMessRequiredBool();
  virtual ~TestMessRequiredBool();
  
  TestMessRequiredBool(const TestMessRequiredBool& from);
  
  inline TestMessRequiredBool& operator=(const TestMessRequiredBool& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredBool& default_instance();
  
  void Swap(TestMessRequiredBool* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredBool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredBool& from);
  void MergeFrom(const TestMessRequiredBool& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline bool test() const;
  inline void set_test(bool value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredBool)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredBool* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredEnum : public ::google::protobuf::Message {
 public:
  TestMessRequiredEnum();
  virtual ~TestMessRequiredEnum();
  
  TestMessRequiredEnum(const TestMessRequiredEnum& from);
  
  inline TestMessRequiredEnum& operator=(const TestMessRequiredEnum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredEnum& default_instance();
  
  void Swap(TestMessRequiredEnum* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredEnum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredEnum& from);
  void MergeFrom(const TestMessRequiredEnum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .foo.TestEnum test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline foo::TestEnum test() const;
  inline void set_test(foo::TestEnum value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredEnum)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredEnum* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredEnumSmall : public ::google::protobuf::Message {
 public:
  TestMessRequiredEnumSmall();
  virtual ~TestMessRequiredEnumSmall();
  
  TestMessRequiredEnumSmall(const TestMessRequiredEnumSmall& from);
  
  inline TestMessRequiredEnumSmall& operator=(const TestMessRequiredEnumSmall& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredEnumSmall& default_instance();
  
  void Swap(TestMessRequiredEnumSmall* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredEnumSmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredEnumSmall& from);
  void MergeFrom(const TestMessRequiredEnumSmall& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .foo.TestEnumSmall test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline foo::TestEnumSmall test() const;
  inline void set_test(foo::TestEnumSmall value);
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredEnumSmall)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredEnumSmall* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredString : public ::google::protobuf::Message {
 public:
  TestMessRequiredString();
  virtual ~TestMessRequiredString();
  
  TestMessRequiredString(const TestMessRequiredString& from);
  
  inline TestMessRequiredString& operator=(const TestMessRequiredString& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredString& default_instance();
  
  void Swap(TestMessRequiredString* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredString& from);
  void MergeFrom(const TestMessRequiredString& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const char* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredString)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredString* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredBytes : public ::google::protobuf::Message {
 public:
  TestMessRequiredBytes();
  virtual ~TestMessRequiredBytes();
  
  TestMessRequiredBytes(const TestMessRequiredBytes& from);
  
  inline TestMessRequiredBytes& operator=(const TestMessRequiredBytes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredBytes& default_instance();
  
  void Swap(TestMessRequiredBytes* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredBytes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredBytes& from);
  void MergeFrom(const TestMessRequiredBytes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline const ::std::string& test() const;
  inline void set_test(const ::std::string& value);
  inline void set_test(const char* value);
  inline void set_test(const void* value, size_t size);
  inline ::std::string* mutable_test();
  inline ::std::string* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredBytes)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredBytes* default_instance_;
};
// -------------------------------------------------------------------

class TestMessRequiredMessage : public ::google::protobuf::Message {
 public:
  TestMessRequiredMessage();
  virtual ~TestMessRequiredMessage();
  
  TestMessRequiredMessage(const TestMessRequiredMessage& from);
  
  inline TestMessRequiredMessage& operator=(const TestMessRequiredMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessRequiredMessage& default_instance();
  
  void Swap(TestMessRequiredMessage* other);
  
  // implements Message ----------------------------------------------
  
  TestMessRequiredMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessRequiredMessage& from);
  void MergeFrom(const TestMessRequiredMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .foo.SubMess test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline const ::foo::SubMess& test() const;
  inline ::foo::SubMess* mutable_test();
  inline ::foo::SubMess* release_test();
  
  // @@protoc_insertion_point(class_scope:foo.TestMessRequiredMessage)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::foo::SubMess* test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static TestMessRequiredMessage* default_instance_;
};
// -------------------------------------------------------------------

class EmptyMess : public ::google::protobuf::Message {
 public:
  EmptyMess();
  virtual ~EmptyMess();
  
  EmptyMess(const EmptyMess& from);
  
  inline EmptyMess& operator=(const EmptyMess& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyMess& default_instance();
  
  void Swap(EmptyMess* other);
  
  // implements Message ----------------------------------------------
  
  EmptyMess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyMess& from);
  void MergeFrom(const EmptyMess& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:foo.EmptyMess)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static EmptyMess* default_instance_;
};
// -------------------------------------------------------------------

class DefaultRequiredValues : public ::google::protobuf::Message {
 public:
  DefaultRequiredValues();
  virtual ~DefaultRequiredValues();
  
  DefaultRequiredValues(const DefaultRequiredValues& from);
  
  inline DefaultRequiredValues& operator=(const DefaultRequiredValues& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DefaultRequiredValues& default_instance();
  
  void Swap(DefaultRequiredValues* other);
  
  // implements Message ----------------------------------------------
  
  DefaultRequiredValues* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DefaultRequiredValues& from);
  void MergeFrom(const DefaultRequiredValues& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 v_int32 = 1 [default = -42];
  inline bool has_v_int32() const;
  inline void clear_v_int32();
  static const int kVInt32FieldNumber = 1;
  inline ::google::protobuf::int32 v_int32() const;
  inline void set_v_int32(::google::protobuf::int32 value);
  
  // required uint32 v_uint32 = 2 [default = 666];
  inline bool has_v_uint32() const;
  inline void clear_v_uint32();
  static const int kVUint32FieldNumber = 2;
  inline ::google::protobuf::uint32 v_uint32() const;
  inline void set_v_uint32(::google::protobuf::uint32 value);
  
  // required int32 v_int64 = 3 [default = 100000];
  inline bool has_v_int64() const;
  inline void clear_v_int64();
  static const int kVInt64FieldNumber = 3;
  inline ::google::protobuf::int32 v_int64() const;
  inline void set_v_int64(::google::protobuf::int32 value);
  
  // required uint32 v_uint64 = 4 [default = 100001];
  inline bool has_v_uint64() const;
  inline void clear_v_uint64();
  static const int kVUint64FieldNumber = 4;
  inline ::google::protobuf::uint32 v_uint64() const;
  inline void set_v_uint64(::google::protobuf::uint32 value);
  
  // required float v_float = 5 [default = 2.5];
  inline bool has_v_float() const;
  inline void clear_v_float();
  static const int kVFloatFieldNumber = 5;
  inline float v_float() const;
  inline void set_v_float(float value);
  
  // required double v_double = 6 [default = 4.5];
  inline bool has_v_double() const;
  inline void clear_v_double();
  static const int kVDoubleFieldNumber = 6;
  inline double v_double() const;
  inline void set_v_double(double value);
  
  // required string v_string = 7 [default = "hi mom\n"];
  inline bool has_v_string() const;
  inline void clear_v_string();
  static const int kVStringFieldNumber = 7;
  inline const ::std::string& v_string() const;
  inline void set_v_string(const ::std::string& value);
  inline void set_v_string(const char* value);
  inline void set_v_string(const char* value, size_t size);
  inline ::std::string* mutable_v_string();
  inline ::std::string* release_v_string();
  
  // required bytes v_bytes = 8 [default = "a \000 character"];
  inline bool has_v_bytes() const;
  inline void clear_v_bytes();
  static const int kVBytesFieldNumber = 8;
  inline const ::std::string& v_bytes() const;
  inline void set_v_bytes(const ::std::string& value);
  inline void set_v_bytes(const char* value);
  inline void set_v_bytes(const void* value, size_t size);
  inline ::std::string* mutable_v_bytes();
  inline ::std::string* release_v_bytes();
  
  // @@protoc_insertion_point(class_scope:foo.DefaultRequiredValues)
 private:
  inline void set_has_v_int32();
  inline void clear_has_v_int32();
  inline void set_has_v_uint32();
  inline void clear_has_v_uint32();
  inline void set_has_v_int64();
  inline void clear_has_v_int64();
  inline void set_has_v_uint64();
  inline void clear_has_v_uint64();
  inline void set_has_v_float();
  inline void clear_has_v_float();
  inline void set_has_v_double();
  inline void clear_has_v_double();
  inline void set_has_v_string();
  inline void clear_has_v_string();
  inline void set_has_v_bytes();
  inline void clear_has_v_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 v_int32_;
  ::google::protobuf::uint32 v_uint32_;
  ::google::protobuf::int32 v_int64_;
  ::google::protobuf::uint32 v_uint64_;
  double v_double_;
  ::std::string* v_string_;
  static const ::std::string _default_v_string_;
  ::std::string* v_bytes_;
  static const ::std::string _default_v_bytes_;
  float v_float_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static DefaultRequiredValues* default_instance_;
};
// -------------------------------------------------------------------

class DefaultOptionalValues : public ::google::protobuf::Message {
 public:
  DefaultOptionalValues();
  virtual ~DefaultOptionalValues();
  
  DefaultOptionalValues(const DefaultOptionalValues& from);
  
  inline DefaultOptionalValues& operator=(const DefaultOptionalValues& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DefaultOptionalValues& default_instance();
  
  void Swap(DefaultOptionalValues* other);
  
  // implements Message ----------------------------------------------
  
  DefaultOptionalValues* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DefaultOptionalValues& from);
  void MergeFrom(const DefaultOptionalValues& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 v_int32 = 1 [default = -42];
  inline bool has_v_int32() const;
  inline void clear_v_int32();
  static const int kVInt32FieldNumber = 1;
  inline ::google::protobuf::int32 v_int32() const;
  inline void set_v_int32(::google::protobuf::int32 value);
  
  // optional uint32 v_uint32 = 2 [default = 666];
  inline bool has_v_uint32() const;
  inline void clear_v_uint32();
  static const int kVUint32FieldNumber = 2;
  inline ::google::protobuf::uint32 v_uint32() const;
  inline void set_v_uint32(::google::protobuf::uint32 value);
  
  // optional int32 v_int64 = 3 [default = 100000];
  inline bool has_v_int64() const;
  inline void clear_v_int64();
  static const int kVInt64FieldNumber = 3;
  inline ::google::protobuf::int32 v_int64() const;
  inline void set_v_int64(::google::protobuf::int32 value);
  
  // optional uint32 v_uint64 = 4 [default = 100001];
  inline bool has_v_uint64() const;
  inline void clear_v_uint64();
  static const int kVUint64FieldNumber = 4;
  inline ::google::protobuf::uint32 v_uint64() const;
  inline void set_v_uint64(::google::protobuf::uint32 value);
  
  // optional float v_float = 5 [default = 2.5];
  inline bool has_v_float() const;
  inline void clear_v_float();
  static const int kVFloatFieldNumber = 5;
  inline float v_float() const;
  inline void set_v_float(float value);
  
  // optional double v_double = 6 [default = 4.5];
  inline bool has_v_double() const;
  inline void clear_v_double();
  static const int kVDoubleFieldNumber = 6;
  inline double v_double() const;
  inline void set_v_double(double value);
  
  // optional string v_string = 7 [default = "hi mom\n"];
  inline bool has_v_string() const;
  inline void clear_v_string();
  static const int kVStringFieldNumber = 7;
  inline const ::std::string& v_string() const;
  inline void set_v_string(const ::std::string& value);
  inline void set_v_string(const char* value);
  inline void set_v_string(const char* value, size_t size);
  inline ::std::string* mutable_v_string();
  inline ::std::string* release_v_string();
  
  // optional bytes v_bytes = 8 [default = "a \000 character"];
  inline bool has_v_bytes() const;
  inline void clear_v_bytes();
  static const int kVBytesFieldNumber = 8;
  inline const ::std::string& v_bytes() const;
  inline void set_v_bytes(const ::std::string& value);
  inline void set_v_bytes(const char* value);
  inline void set_v_bytes(const void* value, size_t size);
  inline ::std::string* mutable_v_bytes();
  inline ::std::string* release_v_bytes();
  
  // @@protoc_insertion_point(class_scope:foo.DefaultOptionalValues)
 private:
  inline void set_has_v_int32();
  inline void clear_has_v_int32();
  inline void set_has_v_uint32();
  inline void clear_has_v_uint32();
  inline void set_has_v_int64();
  inline void clear_has_v_int64();
  inline void set_has_v_uint64();
  inline void clear_has_v_uint64();
  inline void set_has_v_float();
  inline void clear_has_v_float();
  inline void set_has_v_double();
  inline void clear_has_v_double();
  inline void set_has_v_string();
  inline void clear_has_v_string();
  inline void set_has_v_bytes();
  inline void clear_has_v_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 v_int32_;
  ::google::protobuf::uint32 v_uint32_;
  ::google::protobuf::int32 v_int64_;
  ::google::protobuf::uint32 v_uint64_;
  double v_double_;
  ::std::string* v_string_;
  static const ::std::string _default_v_string_;
  ::std::string* v_bytes_;
  static const ::std::string _default_v_bytes_;
  float v_float_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static DefaultOptionalValues* default_instance_;
};
// -------------------------------------------------------------------

class AllocValues : public ::google::protobuf::Message {
 public:
  AllocValues();
  virtual ~AllocValues();
  
  AllocValues(const AllocValues& from);
  
  inline AllocValues& operator=(const AllocValues& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocValues& default_instance();
  
  void Swap(AllocValues* other);
  
  // implements Message ----------------------------------------------
  
  AllocValues* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocValues& from);
  void MergeFrom(const AllocValues& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes o_bytes = 1;
  inline bool has_o_bytes() const;
  inline void clear_o_bytes();
  static const int kOBytesFieldNumber = 1;
  inline const ::std::string& o_bytes() const;
  inline void set_o_bytes(const ::std::string& value);
  inline void set_o_bytes(const char* value);
  inline void set_o_bytes(const void* value, size_t size);
  inline ::std::string* mutable_o_bytes();
  inline ::std::string* release_o_bytes();
  
  // repeated string r_string = 2;
  inline int r_string_size() const;
  inline void clear_r_string();
  static const int kRStringFieldNumber = 2;
  inline const ::std::string& r_string(int index) const;
  inline ::std::string* mutable_r_string(int index);
  inline void set_r_string(int index, const ::std::string& value);
  inline void set_r_string(int index, const char* value);
  inline void set_r_string(int index, const char* value, size_t size);
  inline ::std::string* add_r_string();
  inline void add_r_string(const ::std::string& value);
  inline void add_r_string(const char* value);
  inline void add_r_string(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& r_string() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_r_string();
  
  // required string a_string = 3;
  inline bool has_a_string() const;
  inline void clear_a_string();
  static const int kAStringFieldNumber = 3;
  inline const ::std::string& a_string() const;
  inline void set_a_string(const ::std::string& value);
  inline void set_a_string(const char* value);
  inline void set_a_string(const char* value, size_t size);
  inline ::std::string* mutable_a_string();
  inline ::std::string* release_a_string();
  
  // required bytes a_bytes = 4;
  inline bool has_a_bytes() const;
  inline void clear_a_bytes();
  static const int kABytesFieldNumber = 4;
  inline const ::std::string& a_bytes() const;
  inline void set_a_bytes(const ::std::string& value);
  inline void set_a_bytes(const char* value);
  inline void set_a_bytes(const void* value, size_t size);
  inline ::std::string* mutable_a_bytes();
  inline ::std::string* release_a_bytes();
  
  // required .foo.DefaultRequiredValues a_mess = 5;
  inline bool has_a_mess() const;
  inline void clear_a_mess();
  static const int kAMessFieldNumber = 5;
  inline const ::foo::DefaultRequiredValues& a_mess() const;
  inline ::foo::DefaultRequiredValues* mutable_a_mess();
  inline ::foo::DefaultRequiredValues* release_a_mess();
  
  // @@protoc_insertion_point(class_scope:foo.AllocValues)
 private:
  inline void set_has_o_bytes();
  inline void clear_has_o_bytes();
  inline void set_has_a_string();
  inline void clear_has_a_string();
  inline void set_has_a_bytes();
  inline void clear_has_a_bytes();
  inline void set_has_a_mess();
  inline void clear_has_a_mess();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* o_bytes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> r_string_;
  ::std::string* a_string_;
  ::std::string* a_bytes_;
  ::foo::DefaultRequiredValues* a_mess_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_test_2dfull_2eproto();
  friend void protobuf_AssignDesc_test_2dfull_2eproto();
  friend void protobuf_ShutdownFile_test_2dfull_2eproto();
  
  void InitAsDefaultInstance();
  static AllocValues* default_instance_;
};
// ===================================================================


// ===================================================================

// SubMess

// required int32 test = 4;
inline bool SubMess::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubMess::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubMess::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubMess::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::google::protobuf::int32 SubMess::test() const {
  return test_;
}
inline void SubMess::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestFieldNo15

// required string test = 15;
inline bool TestFieldNo15::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo15::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo15::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo15::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo15::test() const {
  return *test_;
}
inline void TestFieldNo15::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo15::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo15::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo15::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo15::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestFieldNo16

// required string test = 16;
inline bool TestFieldNo16::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo16::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo16::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo16::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo16::test() const {
  return *test_;
}
inline void TestFieldNo16::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo16::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo16::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo16::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo16::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestFieldNo2047

// required string test = 2047;
inline bool TestFieldNo2047::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo2047::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo2047::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo2047::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo2047::test() const {
  return *test_;
}
inline void TestFieldNo2047::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo2047::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo2047::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo2047::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo2047::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestFieldNo2048

// required string test = 2048;
inline bool TestFieldNo2048::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo2048::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo2048::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo2048::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo2048::test() const {
  return *test_;
}
inline void TestFieldNo2048::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo2048::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo2048::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo2048::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo2048::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestFieldNo262143

// required string test = 262143;
inline bool TestFieldNo262143::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo262143::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo262143::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo262143::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo262143::test() const {
  return *test_;
}
inline void TestFieldNo262143::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo262143::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo262143::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo262143::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo262143::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestFieldNo262144

// required string test = 262144;
inline bool TestFieldNo262144::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo262144::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo262144::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo262144::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo262144::test() const {
  return *test_;
}
inline void TestFieldNo262144::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo262144::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo262144::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo262144::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo262144::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestFieldNo33554431

// required string test = 33554431;
inline bool TestFieldNo33554431::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo33554431::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo33554431::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo33554431::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo33554431::test() const {
  return *test_;
}
inline void TestFieldNo33554431::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo33554431::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo33554431::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo33554431::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo33554431::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestFieldNo33554432

// required string test = 33554432;
inline bool TestFieldNo33554432::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestFieldNo33554432::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestFieldNo33554432::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestFieldNo33554432::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestFieldNo33554432::test() const {
  return *test_;
}
inline void TestFieldNo33554432::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo33554432::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestFieldNo33554432::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestFieldNo33554432::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestFieldNo33554432::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMess

// repeated int32 test_int32 = 1;
inline int TestMess::test_int32_size() const {
  return test_int32_.size();
}
inline void TestMess::clear_test_int32() {
  test_int32_.Clear();
}
inline ::google::protobuf::int32 TestMess::test_int32(int index) const {
  return test_int32_.Get(index);
}
inline void TestMess::set_test_int32(int index, ::google::protobuf::int32 value) {
  test_int32_.Set(index, value);
}
inline void TestMess::add_test_int32(::google::protobuf::int32 value) {
  test_int32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestMess::test_int32() const {
  return test_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestMess::mutable_test_int32() {
  return &test_int32_;
}

// repeated sint32 test_sint32 = 2;
inline int TestMess::test_sint32_size() const {
  return test_sint32_.size();
}
inline void TestMess::clear_test_sint32() {
  test_sint32_.Clear();
}
inline ::google::protobuf::int32 TestMess::test_sint32(int index) const {
  return test_sint32_.Get(index);
}
inline void TestMess::set_test_sint32(int index, ::google::protobuf::int32 value) {
  test_sint32_.Set(index, value);
}
inline void TestMess::add_test_sint32(::google::protobuf::int32 value) {
  test_sint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestMess::test_sint32() const {
  return test_sint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestMess::mutable_test_sint32() {
  return &test_sint32_;
}

// repeated sfixed32 test_sfixed32 = 3;
inline int TestMess::test_sfixed32_size() const {
  return test_sfixed32_.size();
}
inline void TestMess::clear_test_sfixed32() {
  test_sfixed32_.Clear();
}
inline ::google::protobuf::int32 TestMess::test_sfixed32(int index) const {
  return test_sfixed32_.Get(index);
}
inline void TestMess::set_test_sfixed32(int index, ::google::protobuf::int32 value) {
  test_sfixed32_.Set(index, value);
}
inline void TestMess::add_test_sfixed32(::google::protobuf::int32 value) {
  test_sfixed32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestMess::test_sfixed32() const {
  return test_sfixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestMess::mutable_test_sfixed32() {
  return &test_sfixed32_;
}

// repeated int64 test_int64 = 4;
inline int TestMess::test_int64_size() const {
  return test_int64_.size();
}
inline void TestMess::clear_test_int64() {
  test_int64_.Clear();
}
inline ::google::protobuf::int64 TestMess::test_int64(int index) const {
  return test_int64_.Get(index);
}
inline void TestMess::set_test_int64(int index, ::google::protobuf::int64 value) {
  test_int64_.Set(index, value);
}
inline void TestMess::add_test_int64(::google::protobuf::int64 value) {
  test_int64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMess::test_int64() const {
  return test_int64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMess::mutable_test_int64() {
  return &test_int64_;
}

// repeated sint64 test_sint64 = 5;
inline int TestMess::test_sint64_size() const {
  return test_sint64_.size();
}
inline void TestMess::clear_test_sint64() {
  test_sint64_.Clear();
}
inline ::google::protobuf::int64 TestMess::test_sint64(int index) const {
  return test_sint64_.Get(index);
}
inline void TestMess::set_test_sint64(int index, ::google::protobuf::int64 value) {
  test_sint64_.Set(index, value);
}
inline void TestMess::add_test_sint64(::google::protobuf::int64 value) {
  test_sint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMess::test_sint64() const {
  return test_sint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMess::mutable_test_sint64() {
  return &test_sint64_;
}

// repeated sfixed64 test_sfixed64 = 6;
inline int TestMess::test_sfixed64_size() const {
  return test_sfixed64_.size();
}
inline void TestMess::clear_test_sfixed64() {
  test_sfixed64_.Clear();
}
inline ::google::protobuf::int64 TestMess::test_sfixed64(int index) const {
  return test_sfixed64_.Get(index);
}
inline void TestMess::set_test_sfixed64(int index, ::google::protobuf::int64 value) {
  test_sfixed64_.Set(index, value);
}
inline void TestMess::add_test_sfixed64(::google::protobuf::int64 value) {
  test_sfixed64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMess::test_sfixed64() const {
  return test_sfixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMess::mutable_test_sfixed64() {
  return &test_sfixed64_;
}

// repeated uint32 test_uint32 = 7;
inline int TestMess::test_uint32_size() const {
  return test_uint32_.size();
}
inline void TestMess::clear_test_uint32() {
  test_uint32_.Clear();
}
inline ::google::protobuf::uint32 TestMess::test_uint32(int index) const {
  return test_uint32_.Get(index);
}
inline void TestMess::set_test_uint32(int index, ::google::protobuf::uint32 value) {
  test_uint32_.Set(index, value);
}
inline void TestMess::add_test_uint32(::google::protobuf::uint32 value) {
  test_uint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestMess::test_uint32() const {
  return test_uint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestMess::mutable_test_uint32() {
  return &test_uint32_;
}

// repeated fixed32 test_fixed32 = 8;
inline int TestMess::test_fixed32_size() const {
  return test_fixed32_.size();
}
inline void TestMess::clear_test_fixed32() {
  test_fixed32_.Clear();
}
inline ::google::protobuf::uint32 TestMess::test_fixed32(int index) const {
  return test_fixed32_.Get(index);
}
inline void TestMess::set_test_fixed32(int index, ::google::protobuf::uint32 value) {
  test_fixed32_.Set(index, value);
}
inline void TestMess::add_test_fixed32(::google::protobuf::uint32 value) {
  test_fixed32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestMess::test_fixed32() const {
  return test_fixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestMess::mutable_test_fixed32() {
  return &test_fixed32_;
}

// repeated uint64 test_uint64 = 9;
inline int TestMess::test_uint64_size() const {
  return test_uint64_.size();
}
inline void TestMess::clear_test_uint64() {
  test_uint64_.Clear();
}
inline ::google::protobuf::uint64 TestMess::test_uint64(int index) const {
  return test_uint64_.Get(index);
}
inline void TestMess::set_test_uint64(int index, ::google::protobuf::uint64 value) {
  test_uint64_.Set(index, value);
}
inline void TestMess::add_test_uint64(::google::protobuf::uint64 value) {
  test_uint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestMess::test_uint64() const {
  return test_uint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestMess::mutable_test_uint64() {
  return &test_uint64_;
}

// repeated fixed64 test_fixed64 = 10;
inline int TestMess::test_fixed64_size() const {
  return test_fixed64_.size();
}
inline void TestMess::clear_test_fixed64() {
  test_fixed64_.Clear();
}
inline ::google::protobuf::uint64 TestMess::test_fixed64(int index) const {
  return test_fixed64_.Get(index);
}
inline void TestMess::set_test_fixed64(int index, ::google::protobuf::uint64 value) {
  test_fixed64_.Set(index, value);
}
inline void TestMess::add_test_fixed64(::google::protobuf::uint64 value) {
  test_fixed64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestMess::test_fixed64() const {
  return test_fixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestMess::mutable_test_fixed64() {
  return &test_fixed64_;
}

// repeated float test_float = 11;
inline int TestMess::test_float_size() const {
  return test_float_.size();
}
inline void TestMess::clear_test_float() {
  test_float_.Clear();
}
inline float TestMess::test_float(int index) const {
  return test_float_.Get(index);
}
inline void TestMess::set_test_float(int index, float value) {
  test_float_.Set(index, value);
}
inline void TestMess::add_test_float(float value) {
  test_float_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TestMess::test_float() const {
  return test_float_;
}
inline ::google::protobuf::RepeatedField< float >*
TestMess::mutable_test_float() {
  return &test_float_;
}

// repeated double test_double = 12;
inline int TestMess::test_double_size() const {
  return test_double_.size();
}
inline void TestMess::clear_test_double() {
  test_double_.Clear();
}
inline double TestMess::test_double(int index) const {
  return test_double_.Get(index);
}
inline void TestMess::set_test_double(int index, double value) {
  test_double_.Set(index, value);
}
inline void TestMess::add_test_double(double value) {
  test_double_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
TestMess::test_double() const {
  return test_double_;
}
inline ::google::protobuf::RepeatedField< double >*
TestMess::mutable_test_double() {
  return &test_double_;
}

// repeated bool test_boolean = 13;
inline int TestMess::test_boolean_size() const {
  return test_boolean_.size();
}
inline void TestMess::clear_test_boolean() {
  test_boolean_.Clear();
}
inline bool TestMess::test_boolean(int index) const {
  return test_boolean_.Get(index);
}
inline void TestMess::set_test_boolean(int index, bool value) {
  test_boolean_.Set(index, value);
}
inline void TestMess::add_test_boolean(bool value) {
  test_boolean_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
TestMess::test_boolean() const {
  return test_boolean_;
}
inline ::google::protobuf::RepeatedField< bool >*
TestMess::mutable_test_boolean() {
  return &test_boolean_;
}

// repeated .foo.TestEnumSmall test_enum_small = 14;
inline int TestMess::test_enum_small_size() const {
  return test_enum_small_.size();
}
inline void TestMess::clear_test_enum_small() {
  test_enum_small_.Clear();
}
inline foo::TestEnumSmall TestMess::test_enum_small(int index) const {
  return static_cast< foo::TestEnumSmall >(test_enum_small_.Get(index));
}
inline void TestMess::set_test_enum_small(int index, foo::TestEnumSmall value) {
  GOOGLE_DCHECK(foo::TestEnumSmall_IsValid(value));
  test_enum_small_.Set(index, value);
}
inline void TestMess::add_test_enum_small(foo::TestEnumSmall value) {
  GOOGLE_DCHECK(foo::TestEnumSmall_IsValid(value));
  test_enum_small_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
TestMess::test_enum_small() const {
  return test_enum_small_;
}
inline ::google::protobuf::RepeatedField<int>*
TestMess::mutable_test_enum_small() {
  return &test_enum_small_;
}

// repeated .foo.TestEnum test_enum = 15;
inline int TestMess::test_enum_size() const {
  return test_enum_.size();
}
inline void TestMess::clear_test_enum() {
  test_enum_.Clear();
}
inline foo::TestEnum TestMess::test_enum(int index) const {
  return static_cast< foo::TestEnum >(test_enum_.Get(index));
}
inline void TestMess::set_test_enum(int index, foo::TestEnum value) {
  GOOGLE_DCHECK(foo::TestEnum_IsValid(value));
  test_enum_.Set(index, value);
}
inline void TestMess::add_test_enum(foo::TestEnum value) {
  GOOGLE_DCHECK(foo::TestEnum_IsValid(value));
  test_enum_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
TestMess::test_enum() const {
  return test_enum_;
}
inline ::google::protobuf::RepeatedField<int>*
TestMess::mutable_test_enum() {
  return &test_enum_;
}

// repeated string test_string = 16;
inline int TestMess::test_string_size() const {
  return test_string_.size();
}
inline void TestMess::clear_test_string() {
  test_string_.Clear();
}
inline const ::std::string& TestMess::test_string(int index) const {
  return test_string_.Get(index);
}
inline ::std::string* TestMess::mutable_test_string(int index) {
  return test_string_.Mutable(index);
}
inline void TestMess::set_test_string(int index, const ::std::string& value) {
  test_string_.Mutable(index)->assign(value);
}
inline void TestMess::set_test_string(int index, const char* value) {
  test_string_.Mutable(index)->assign(value);
}
inline void TestMess::set_test_string(int index, const char* value, size_t size) {
  test_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMess::add_test_string() {
  return test_string_.Add();
}
inline void TestMess::add_test_string(const ::std::string& value) {
  test_string_.Add()->assign(value);
}
inline void TestMess::add_test_string(const char* value) {
  test_string_.Add()->assign(value);
}
inline void TestMess::add_test_string(const char* value, size_t size) {
  test_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestMess::test_string() const {
  return test_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestMess::mutable_test_string() {
  return &test_string_;
}

// repeated bytes test_bytes = 17;
inline int TestMess::test_bytes_size() const {
  return test_bytes_.size();
}
inline void TestMess::clear_test_bytes() {
  test_bytes_.Clear();
}
inline const ::std::string& TestMess::test_bytes(int index) const {
  return test_bytes_.Get(index);
}
inline ::std::string* TestMess::mutable_test_bytes(int index) {
  return test_bytes_.Mutable(index);
}
inline void TestMess::set_test_bytes(int index, const ::std::string& value) {
  test_bytes_.Mutable(index)->assign(value);
}
inline void TestMess::set_test_bytes(int index, const char* value) {
  test_bytes_.Mutable(index)->assign(value);
}
inline void TestMess::set_test_bytes(int index, const void* value, size_t size) {
  test_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMess::add_test_bytes() {
  return test_bytes_.Add();
}
inline void TestMess::add_test_bytes(const ::std::string& value) {
  test_bytes_.Add()->assign(value);
}
inline void TestMess::add_test_bytes(const char* value) {
  test_bytes_.Add()->assign(value);
}
inline void TestMess::add_test_bytes(const void* value, size_t size) {
  test_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestMess::test_bytes() const {
  return test_bytes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestMess::mutable_test_bytes() {
  return &test_bytes_;
}

// repeated .foo.SubMess test_message = 18;
inline int TestMess::test_message_size() const {
  return test_message_.size();
}
inline void TestMess::clear_test_message() {
  test_message_.Clear();
}
inline const ::foo::SubMess& TestMess::test_message(int index) const {
  return test_message_.Get(index);
}
inline ::foo::SubMess* TestMess::mutable_test_message(int index) {
  return test_message_.Mutable(index);
}
inline ::foo::SubMess* TestMess::add_test_message() {
  return test_message_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::foo::SubMess >&
TestMess::test_message() const {
  return test_message_;
}
inline ::google::protobuf::RepeatedPtrField< ::foo::SubMess >*
TestMess::mutable_test_message() {
  return &test_message_;
}

// -------------------------------------------------------------------

// TestMessPacked

// repeated int32 test_int32 = 1 [packed = true];
inline int TestMessPacked::test_int32_size() const {
  return test_int32_.size();
}
inline void TestMessPacked::clear_test_int32() {
  test_int32_.Clear();
}
inline ::google::protobuf::int32 TestMessPacked::test_int32(int index) const {
  return test_int32_.Get(index);
}
inline void TestMessPacked::set_test_int32(int index, ::google::protobuf::int32 value) {
  test_int32_.Set(index, value);
}
inline void TestMessPacked::add_test_int32(::google::protobuf::int32 value) {
  test_int32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestMessPacked::test_int32() const {
  return test_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestMessPacked::mutable_test_int32() {
  return &test_int32_;
}

// repeated sint32 test_sint32 = 2 [packed = true];
inline int TestMessPacked::test_sint32_size() const {
  return test_sint32_.size();
}
inline void TestMessPacked::clear_test_sint32() {
  test_sint32_.Clear();
}
inline ::google::protobuf::int32 TestMessPacked::test_sint32(int index) const {
  return test_sint32_.Get(index);
}
inline void TestMessPacked::set_test_sint32(int index, ::google::protobuf::int32 value) {
  test_sint32_.Set(index, value);
}
inline void TestMessPacked::add_test_sint32(::google::protobuf::int32 value) {
  test_sint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestMessPacked::test_sint32() const {
  return test_sint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestMessPacked::mutable_test_sint32() {
  return &test_sint32_;
}

// repeated sfixed32 test_sfixed32 = 3 [packed = true];
inline int TestMessPacked::test_sfixed32_size() const {
  return test_sfixed32_.size();
}
inline void TestMessPacked::clear_test_sfixed32() {
  test_sfixed32_.Clear();
}
inline ::google::protobuf::int32 TestMessPacked::test_sfixed32(int index) const {
  return test_sfixed32_.Get(index);
}
inline void TestMessPacked::set_test_sfixed32(int index, ::google::protobuf::int32 value) {
  test_sfixed32_.Set(index, value);
}
inline void TestMessPacked::add_test_sfixed32(::google::protobuf::int32 value) {
  test_sfixed32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestMessPacked::test_sfixed32() const {
  return test_sfixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestMessPacked::mutable_test_sfixed32() {
  return &test_sfixed32_;
}

// repeated int64 test_int64 = 4 [packed = true];
inline int TestMessPacked::test_int64_size() const {
  return test_int64_.size();
}
inline void TestMessPacked::clear_test_int64() {
  test_int64_.Clear();
}
inline ::google::protobuf::int64 TestMessPacked::test_int64(int index) const {
  return test_int64_.Get(index);
}
inline void TestMessPacked::set_test_int64(int index, ::google::protobuf::int64 value) {
  test_int64_.Set(index, value);
}
inline void TestMessPacked::add_test_int64(::google::protobuf::int64 value) {
  test_int64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMessPacked::test_int64() const {
  return test_int64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMessPacked::mutable_test_int64() {
  return &test_int64_;
}

// repeated sint64 test_sint64 = 5 [packed = true];
inline int TestMessPacked::test_sint64_size() const {
  return test_sint64_.size();
}
inline void TestMessPacked::clear_test_sint64() {
  test_sint64_.Clear();
}
inline ::google::protobuf::int64 TestMessPacked::test_sint64(int index) const {
  return test_sint64_.Get(index);
}
inline void TestMessPacked::set_test_sint64(int index, ::google::protobuf::int64 value) {
  test_sint64_.Set(index, value);
}
inline void TestMessPacked::add_test_sint64(::google::protobuf::int64 value) {
  test_sint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMessPacked::test_sint64() const {
  return test_sint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMessPacked::mutable_test_sint64() {
  return &test_sint64_;
}

// repeated sfixed64 test_sfixed64 = 6 [packed = true];
inline int TestMessPacked::test_sfixed64_size() const {
  return test_sfixed64_.size();
}
inline void TestMessPacked::clear_test_sfixed64() {
  test_sfixed64_.Clear();
}
inline ::google::protobuf::int64 TestMessPacked::test_sfixed64(int index) const {
  return test_sfixed64_.Get(index);
}
inline void TestMessPacked::set_test_sfixed64(int index, ::google::protobuf::int64 value) {
  test_sfixed64_.Set(index, value);
}
inline void TestMessPacked::add_test_sfixed64(::google::protobuf::int64 value) {
  test_sfixed64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMessPacked::test_sfixed64() const {
  return test_sfixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMessPacked::mutable_test_sfixed64() {
  return &test_sfixed64_;
}

// repeated uint32 test_uint32 = 7 [packed = true];
inline int TestMessPacked::test_uint32_size() const {
  return test_uint32_.size();
}
inline void TestMessPacked::clear_test_uint32() {
  test_uint32_.Clear();
}
inline ::google::protobuf::uint32 TestMessPacked::test_uint32(int index) const {
  return test_uint32_.Get(index);
}
inline void TestMessPacked::set_test_uint32(int index, ::google::protobuf::uint32 value) {
  test_uint32_.Set(index, value);
}
inline void TestMessPacked::add_test_uint32(::google::protobuf::uint32 value) {
  test_uint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestMessPacked::test_uint32() const {
  return test_uint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestMessPacked::mutable_test_uint32() {
  return &test_uint32_;
}

// repeated fixed32 test_fixed32 = 8 [packed = true];
inline int TestMessPacked::test_fixed32_size() const {
  return test_fixed32_.size();
}
inline void TestMessPacked::clear_test_fixed32() {
  test_fixed32_.Clear();
}
inline ::google::protobuf::uint32 TestMessPacked::test_fixed32(int index) const {
  return test_fixed32_.Get(index);
}
inline void TestMessPacked::set_test_fixed32(int index, ::google::protobuf::uint32 value) {
  test_fixed32_.Set(index, value);
}
inline void TestMessPacked::add_test_fixed32(::google::protobuf::uint32 value) {
  test_fixed32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestMessPacked::test_fixed32() const {
  return test_fixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestMessPacked::mutable_test_fixed32() {
  return &test_fixed32_;
}

// repeated uint64 test_uint64 = 9 [packed = true];
inline int TestMessPacked::test_uint64_size() const {
  return test_uint64_.size();
}
inline void TestMessPacked::clear_test_uint64() {
  test_uint64_.Clear();
}
inline ::google::protobuf::uint64 TestMessPacked::test_uint64(int index) const {
  return test_uint64_.Get(index);
}
inline void TestMessPacked::set_test_uint64(int index, ::google::protobuf::uint64 value) {
  test_uint64_.Set(index, value);
}
inline void TestMessPacked::add_test_uint64(::google::protobuf::uint64 value) {
  test_uint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestMessPacked::test_uint64() const {
  return test_uint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestMessPacked::mutable_test_uint64() {
  return &test_uint64_;
}

// repeated fixed64 test_fixed64 = 10 [packed = true];
inline int TestMessPacked::test_fixed64_size() const {
  return test_fixed64_.size();
}
inline void TestMessPacked::clear_test_fixed64() {
  test_fixed64_.Clear();
}
inline ::google::protobuf::uint64 TestMessPacked::test_fixed64(int index) const {
  return test_fixed64_.Get(index);
}
inline void TestMessPacked::set_test_fixed64(int index, ::google::protobuf::uint64 value) {
  test_fixed64_.Set(index, value);
}
inline void TestMessPacked::add_test_fixed64(::google::protobuf::uint64 value) {
  test_fixed64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestMessPacked::test_fixed64() const {
  return test_fixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestMessPacked::mutable_test_fixed64() {
  return &test_fixed64_;
}

// repeated float test_float = 11 [packed = true];
inline int TestMessPacked::test_float_size() const {
  return test_float_.size();
}
inline void TestMessPacked::clear_test_float() {
  test_float_.Clear();
}
inline float TestMessPacked::test_float(int index) const {
  return test_float_.Get(index);
}
inline void TestMessPacked::set_test_float(int index, float value) {
  test_float_.Set(index, value);
}
inline void TestMessPacked::add_test_float(float value) {
  test_float_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TestMessPacked::test_float() const {
  return test_float_;
}
inline ::google::protobuf::RepeatedField< float >*
TestMessPacked::mutable_test_float() {
  return &test_float_;
}

// repeated double test_double = 12 [packed = true];
inline int TestMessPacked::test_double_size() const {
  return test_double_.size();
}
inline void TestMessPacked::clear_test_double() {
  test_double_.Clear();
}
inline double TestMessPacked::test_double(int index) const {
  return test_double_.Get(index);
}
inline void TestMessPacked::set_test_double(int index, double value) {
  test_double_.Set(index, value);
}
inline void TestMessPacked::add_test_double(double value) {
  test_double_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
TestMessPacked::test_double() const {
  return test_double_;
}
inline ::google::protobuf::RepeatedField< double >*
TestMessPacked::mutable_test_double() {
  return &test_double_;
}

// repeated bool test_boolean = 13 [packed = true];
inline int TestMessPacked::test_boolean_size() const {
  return test_boolean_.size();
}
inline void TestMessPacked::clear_test_boolean() {
  test_boolean_.Clear();
}
inline bool TestMessPacked::test_boolean(int index) const {
  return test_boolean_.Get(index);
}
inline void TestMessPacked::set_test_boolean(int index, bool value) {
  test_boolean_.Set(index, value);
}
inline void TestMessPacked::add_test_boolean(bool value) {
  test_boolean_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
TestMessPacked::test_boolean() const {
  return test_boolean_;
}
inline ::google::protobuf::RepeatedField< bool >*
TestMessPacked::mutable_test_boolean() {
  return &test_boolean_;
}

// repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
inline int TestMessPacked::test_enum_small_size() const {
  return test_enum_small_.size();
}
inline void TestMessPacked::clear_test_enum_small() {
  test_enum_small_.Clear();
}
inline foo::TestEnumSmall TestMessPacked::test_enum_small(int index) const {
  return static_cast< foo::TestEnumSmall >(test_enum_small_.Get(index));
}
inline void TestMessPacked::set_test_enum_small(int index, foo::TestEnumSmall value) {
  GOOGLE_DCHECK(foo::TestEnumSmall_IsValid(value));
  test_enum_small_.Set(index, value);
}
inline void TestMessPacked::add_test_enum_small(foo::TestEnumSmall value) {
  GOOGLE_DCHECK(foo::TestEnumSmall_IsValid(value));
  test_enum_small_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
TestMessPacked::test_enum_small() const {
  return test_enum_small_;
}
inline ::google::protobuf::RepeatedField<int>*
TestMessPacked::mutable_test_enum_small() {
  return &test_enum_small_;
}

// repeated .foo.TestEnum test_enum = 15 [packed = true];
inline int TestMessPacked::test_enum_size() const {
  return test_enum_.size();
}
inline void TestMessPacked::clear_test_enum() {
  test_enum_.Clear();
}
inline foo::TestEnum TestMessPacked::test_enum(int index) const {
  return static_cast< foo::TestEnum >(test_enum_.Get(index));
}
inline void TestMessPacked::set_test_enum(int index, foo::TestEnum value) {
  GOOGLE_DCHECK(foo::TestEnum_IsValid(value));
  test_enum_.Set(index, value);
}
inline void TestMessPacked::add_test_enum(foo::TestEnum value) {
  GOOGLE_DCHECK(foo::TestEnum_IsValid(value));
  test_enum_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
TestMessPacked::test_enum() const {
  return test_enum_;
}
inline ::google::protobuf::RepeatedField<int>*
TestMessPacked::mutable_test_enum() {
  return &test_enum_;
}

// -------------------------------------------------------------------

// TestMessOptional

// optional int32 test_int32 = 1;
inline bool TestMessOptional::has_test_int32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessOptional::set_has_test_int32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessOptional::clear_has_test_int32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessOptional::clear_test_int32() {
  test_int32_ = 0;
  clear_has_test_int32();
}
inline ::google::protobuf::int32 TestMessOptional::test_int32() const {
  return test_int32_;
}
inline void TestMessOptional::set_test_int32(::google::protobuf::int32 value) {
  set_has_test_int32();
  test_int32_ = value;
}

// optional sint32 test_sint32 = 2;
inline bool TestMessOptional::has_test_sint32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestMessOptional::set_has_test_sint32() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestMessOptional::clear_has_test_sint32() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestMessOptional::clear_test_sint32() {
  test_sint32_ = 0;
  clear_has_test_sint32();
}
inline ::google::protobuf::int32 TestMessOptional::test_sint32() const {
  return test_sint32_;
}
inline void TestMessOptional::set_test_sint32(::google::protobuf::int32 value) {
  set_has_test_sint32();
  test_sint32_ = value;
}

// optional sfixed32 test_sfixed32 = 3;
inline bool TestMessOptional::has_test_sfixed32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestMessOptional::set_has_test_sfixed32() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestMessOptional::clear_has_test_sfixed32() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestMessOptional::clear_test_sfixed32() {
  test_sfixed32_ = 0;
  clear_has_test_sfixed32();
}
inline ::google::protobuf::int32 TestMessOptional::test_sfixed32() const {
  return test_sfixed32_;
}
inline void TestMessOptional::set_test_sfixed32(::google::protobuf::int32 value) {
  set_has_test_sfixed32();
  test_sfixed32_ = value;
}

// optional int64 test_int64 = 4;
inline bool TestMessOptional::has_test_int64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestMessOptional::set_has_test_int64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestMessOptional::clear_has_test_int64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestMessOptional::clear_test_int64() {
  test_int64_ = GOOGLE_LONGLONG(0);
  clear_has_test_int64();
}
inline ::google::protobuf::int64 TestMessOptional::test_int64() const {
  return test_int64_;
}
inline void TestMessOptional::set_test_int64(::google::protobuf::int64 value) {
  set_has_test_int64();
  test_int64_ = value;
}

// optional sint64 test_sint64 = 5;
inline bool TestMessOptional::has_test_sint64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestMessOptional::set_has_test_sint64() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestMessOptional::clear_has_test_sint64() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestMessOptional::clear_test_sint64() {
  test_sint64_ = GOOGLE_LONGLONG(0);
  clear_has_test_sint64();
}
inline ::google::protobuf::int64 TestMessOptional::test_sint64() const {
  return test_sint64_;
}
inline void TestMessOptional::set_test_sint64(::google::protobuf::int64 value) {
  set_has_test_sint64();
  test_sint64_ = value;
}

// optional sfixed64 test_sfixed64 = 6;
inline bool TestMessOptional::has_test_sfixed64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestMessOptional::set_has_test_sfixed64() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TestMessOptional::clear_has_test_sfixed64() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TestMessOptional::clear_test_sfixed64() {
  test_sfixed64_ = GOOGLE_LONGLONG(0);
  clear_has_test_sfixed64();
}
inline ::google::protobuf::int64 TestMessOptional::test_sfixed64() const {
  return test_sfixed64_;
}
inline void TestMessOptional::set_test_sfixed64(::google::protobuf::int64 value) {
  set_has_test_sfixed64();
  test_sfixed64_ = value;
}

// optional uint32 test_uint32 = 7;
inline bool TestMessOptional::has_test_uint32() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TestMessOptional::set_has_test_uint32() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TestMessOptional::clear_has_test_uint32() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TestMessOptional::clear_test_uint32() {
  test_uint32_ = 0u;
  clear_has_test_uint32();
}
inline ::google::protobuf::uint32 TestMessOptional::test_uint32() const {
  return test_uint32_;
}
inline void TestMessOptional::set_test_uint32(::google::protobuf::uint32 value) {
  set_has_test_uint32();
  test_uint32_ = value;
}

// optional fixed32 test_fixed32 = 8;
inline bool TestMessOptional::has_test_fixed32() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TestMessOptional::set_has_test_fixed32() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TestMessOptional::clear_has_test_fixed32() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TestMessOptional::clear_test_fixed32() {
  test_fixed32_ = 0u;
  clear_has_test_fixed32();
}
inline ::google::protobuf::uint32 TestMessOptional::test_fixed32() const {
  return test_fixed32_;
}
inline void TestMessOptional::set_test_fixed32(::google::protobuf::uint32 value) {
  set_has_test_fixed32();
  test_fixed32_ = value;
}

// optional uint64 test_uint64 = 9;
inline bool TestMessOptional::has_test_uint64() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TestMessOptional::set_has_test_uint64() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TestMessOptional::clear_has_test_uint64() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TestMessOptional::clear_test_uint64() {
  test_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_test_uint64();
}
inline ::google::protobuf::uint64 TestMessOptional::test_uint64() const {
  return test_uint64_;
}
inline void TestMessOptional::set_test_uint64(::google::protobuf::uint64 value) {
  set_has_test_uint64();
  test_uint64_ = value;
}

// optional fixed64 test_fixed64 = 10;
inline bool TestMessOptional::has_test_fixed64() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TestMessOptional::set_has_test_fixed64() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TestMessOptional::clear_has_test_fixed64() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TestMessOptional::clear_test_fixed64() {
  test_fixed64_ = GOOGLE_ULONGLONG(0);
  clear_has_test_fixed64();
}
inline ::google::protobuf::uint64 TestMessOptional::test_fixed64() const {
  return test_fixed64_;
}
inline void TestMessOptional::set_test_fixed64(::google::protobuf::uint64 value) {
  set_has_test_fixed64();
  test_fixed64_ = value;
}

// optional float test_float = 11;
inline bool TestMessOptional::has_test_float() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TestMessOptional::set_has_test_float() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TestMessOptional::clear_has_test_float() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TestMessOptional::clear_test_float() {
  test_float_ = 0;
  clear_has_test_float();
}
inline float TestMessOptional::test_float() const {
  return test_float_;
}
inline void TestMessOptional::set_test_float(float value) {
  set_has_test_float();
  test_float_ = value;
}

// optional double test_double = 12;
inline bool TestMessOptional::has_test_double() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TestMessOptional::set_has_test_double() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TestMessOptional::clear_has_test_double() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TestMessOptional::clear_test_double() {
  test_double_ = 0;
  clear_has_test_double();
}
inline double TestMessOptional::test_double() const {
  return test_double_;
}
inline void TestMessOptional::set_test_double(double value) {
  set_has_test_double();
  test_double_ = value;
}

// optional bool test_boolean = 13;
inline bool TestMessOptional::has_test_boolean() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TestMessOptional::set_has_test_boolean() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TestMessOptional::clear_has_test_boolean() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TestMessOptional::clear_test_boolean() {
  test_boolean_ = false;
  clear_has_test_boolean();
}
inline bool TestMessOptional::test_boolean() const {
  return test_boolean_;
}
inline void TestMessOptional::set_test_boolean(bool value) {
  set_has_test_boolean();
  test_boolean_ = value;
}

// optional .foo.TestEnumSmall test_enum_small = 14;
inline bool TestMessOptional::has_test_enum_small() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TestMessOptional::set_has_test_enum_small() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TestMessOptional::clear_has_test_enum_small() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TestMessOptional::clear_test_enum_small() {
  test_enum_small_ = 0;
  clear_has_test_enum_small();
}
inline foo::TestEnumSmall TestMessOptional::test_enum_small() const {
  return static_cast< foo::TestEnumSmall >(test_enum_small_);
}
inline void TestMessOptional::set_test_enum_small(foo::TestEnumSmall value) {
  GOOGLE_DCHECK(foo::TestEnumSmall_IsValid(value));
  set_has_test_enum_small();
  test_enum_small_ = value;
}

// optional .foo.TestEnum test_enum = 15;
inline bool TestMessOptional::has_test_enum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TestMessOptional::set_has_test_enum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TestMessOptional::clear_has_test_enum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TestMessOptional::clear_test_enum() {
  test_enum_ = 0;
  clear_has_test_enum();
}
inline foo::TestEnum TestMessOptional::test_enum() const {
  return static_cast< foo::TestEnum >(test_enum_);
}
inline void TestMessOptional::set_test_enum(foo::TestEnum value) {
  GOOGLE_DCHECK(foo::TestEnum_IsValid(value));
  set_has_test_enum();
  test_enum_ = value;
}

// optional string test_string = 16;
inline bool TestMessOptional::has_test_string() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TestMessOptional::set_has_test_string() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TestMessOptional::clear_has_test_string() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TestMessOptional::clear_test_string() {
  if (test_string_ != &::google::protobuf::internal::kEmptyString) {
    test_string_->clear();
  }
  clear_has_test_string();
}
inline const ::std::string& TestMessOptional::test_string() const {
  return *test_string_;
}
inline void TestMessOptional::set_test_string(const ::std::string& value) {
  set_has_test_string();
  if (test_string_ == &::google::protobuf::internal::kEmptyString) {
    test_string_ = new ::std::string;
  }
  test_string_->assign(value);
}
inline void TestMessOptional::set_test_string(const char* value) {
  set_has_test_string();
  if (test_string_ == &::google::protobuf::internal::kEmptyString) {
    test_string_ = new ::std::string;
  }
  test_string_->assign(value);
}
inline void TestMessOptional::set_test_string(const char* value, size_t size) {
  set_has_test_string();
  if (test_string_ == &::google::protobuf::internal::kEmptyString) {
    test_string_ = new ::std::string;
  }
  test_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessOptional::mutable_test_string() {
  set_has_test_string();
  if (test_string_ == &::google::protobuf::internal::kEmptyString) {
    test_string_ = new ::std::string;
  }
  return test_string_;
}
inline ::std::string* TestMessOptional::release_test_string() {
  clear_has_test_string();
  if (test_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_string_;
    test_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes test_bytes = 17;
inline bool TestMessOptional::has_test_bytes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TestMessOptional::set_has_test_bytes() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TestMessOptional::clear_has_test_bytes() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TestMessOptional::clear_test_bytes() {
  if (test_bytes_ != &::google::protobuf::internal::kEmptyString) {
    test_bytes_->clear();
  }
  clear_has_test_bytes();
}
inline const ::std::string& TestMessOptional::test_bytes() const {
  return *test_bytes_;
}
inline void TestMessOptional::set_test_bytes(const ::std::string& value) {
  set_has_test_bytes();
  if (test_bytes_ == &::google::protobuf::internal::kEmptyString) {
    test_bytes_ = new ::std::string;
  }
  test_bytes_->assign(value);
}
inline void TestMessOptional::set_test_bytes(const char* value) {
  set_has_test_bytes();
  if (test_bytes_ == &::google::protobuf::internal::kEmptyString) {
    test_bytes_ = new ::std::string;
  }
  test_bytes_->assign(value);
}
inline void TestMessOptional::set_test_bytes(const void* value, size_t size) {
  set_has_test_bytes();
  if (test_bytes_ == &::google::protobuf::internal::kEmptyString) {
    test_bytes_ = new ::std::string;
  }
  test_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessOptional::mutable_test_bytes() {
  set_has_test_bytes();
  if (test_bytes_ == &::google::protobuf::internal::kEmptyString) {
    test_bytes_ = new ::std::string;
  }
  return test_bytes_;
}
inline ::std::string* TestMessOptional::release_test_bytes() {
  clear_has_test_bytes();
  if (test_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_bytes_;
    test_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .foo.SubMess test_message = 18;
inline bool TestMessOptional::has_test_message() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TestMessOptional::set_has_test_message() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TestMessOptional::clear_has_test_message() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TestMessOptional::clear_test_message() {
  if (test_message_ != NULL) test_message_->::foo::SubMess::Clear();
  clear_has_test_message();
}
inline const ::foo::SubMess& TestMessOptional::test_message() const {
  return test_message_ != NULL ? *test_message_ : *default_instance_->test_message_;
}
inline ::foo::SubMess* TestMessOptional::mutable_test_message() {
  set_has_test_message();
  if (test_message_ == NULL) test_message_ = new ::foo::SubMess;
  return test_message_;
}
inline ::foo::SubMess* TestMessOptional::release_test_message() {
  clear_has_test_message();
  ::foo::SubMess* temp = test_message_;
  test_message_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TestMessRequiredInt32

// required int32 test = 42;
inline bool TestMessRequiredInt32::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredInt32::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredInt32::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredInt32::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::google::protobuf::int32 TestMessRequiredInt32::test() const {
  return test_;
}
inline void TestMessRequiredInt32::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredSInt32

// required sint32 test = 43;
inline bool TestMessRequiredSInt32::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredSInt32::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredSInt32::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredSInt32::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::google::protobuf::int32 TestMessRequiredSInt32::test() const {
  return test_;
}
inline void TestMessRequiredSInt32::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredSFixed32

// required sfixed32 test = 100;
inline bool TestMessRequiredSFixed32::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredSFixed32::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredSFixed32::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredSFixed32::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::google::protobuf::int32 TestMessRequiredSFixed32::test() const {
  return test_;
}
inline void TestMessRequiredSFixed32::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredInt64

// required int64 test = 1;
inline bool TestMessRequiredInt64::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredInt64::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredInt64::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredInt64::clear_test() {
  test_ = GOOGLE_LONGLONG(0);
  clear_has_test();
}
inline ::google::protobuf::int64 TestMessRequiredInt64::test() const {
  return test_;
}
inline void TestMessRequiredInt64::set_test(::google::protobuf::int64 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredSInt64

// required sint64 test = 11;
inline bool TestMessRequiredSInt64::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredSInt64::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredSInt64::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredSInt64::clear_test() {
  test_ = GOOGLE_LONGLONG(0);
  clear_has_test();
}
inline ::google::protobuf::int64 TestMessRequiredSInt64::test() const {
  return test_;
}
inline void TestMessRequiredSInt64::set_test(::google::protobuf::int64 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredSFixed64

// required sfixed64 test = 12;
inline bool TestMessRequiredSFixed64::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredSFixed64::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredSFixed64::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredSFixed64::clear_test() {
  test_ = GOOGLE_LONGLONG(0);
  clear_has_test();
}
inline ::google::protobuf::int64 TestMessRequiredSFixed64::test() const {
  return test_;
}
inline void TestMessRequiredSFixed64::set_test(::google::protobuf::int64 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredUInt32

// required uint32 test = 1;
inline bool TestMessRequiredUInt32::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredUInt32::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredUInt32::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredUInt32::clear_test() {
  test_ = 0u;
  clear_has_test();
}
inline ::google::protobuf::uint32 TestMessRequiredUInt32::test() const {
  return test_;
}
inline void TestMessRequiredUInt32::set_test(::google::protobuf::uint32 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredFixed32

// required fixed32 test = 1;
inline bool TestMessRequiredFixed32::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredFixed32::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredFixed32::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredFixed32::clear_test() {
  test_ = 0u;
  clear_has_test();
}
inline ::google::protobuf::uint32 TestMessRequiredFixed32::test() const {
  return test_;
}
inline void TestMessRequiredFixed32::set_test(::google::protobuf::uint32 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredUInt64

// required uint64 test = 1;
inline bool TestMessRequiredUInt64::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredUInt64::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredUInt64::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredUInt64::clear_test() {
  test_ = GOOGLE_ULONGLONG(0);
  clear_has_test();
}
inline ::google::protobuf::uint64 TestMessRequiredUInt64::test() const {
  return test_;
}
inline void TestMessRequiredUInt64::set_test(::google::protobuf::uint64 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredFixed64

// required fixed64 test = 1;
inline bool TestMessRequiredFixed64::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredFixed64::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredFixed64::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredFixed64::clear_test() {
  test_ = GOOGLE_ULONGLONG(0);
  clear_has_test();
}
inline ::google::protobuf::uint64 TestMessRequiredFixed64::test() const {
  return test_;
}
inline void TestMessRequiredFixed64::set_test(::google::protobuf::uint64 value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredFloat

// required float test = 1;
inline bool TestMessRequiredFloat::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredFloat::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredFloat::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredFloat::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline float TestMessRequiredFloat::test() const {
  return test_;
}
inline void TestMessRequiredFloat::set_test(float value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredDouble

// required double test = 1;
inline bool TestMessRequiredDouble::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredDouble::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredDouble::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredDouble::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline double TestMessRequiredDouble::test() const {
  return test_;
}
inline void TestMessRequiredDouble::set_test(double value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredBool

// required bool test = 1;
inline bool TestMessRequiredBool::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredBool::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredBool::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredBool::clear_test() {
  test_ = false;
  clear_has_test();
}
inline bool TestMessRequiredBool::test() const {
  return test_;
}
inline void TestMessRequiredBool::set_test(bool value) {
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredEnum

// required .foo.TestEnum test = 1;
inline bool TestMessRequiredEnum::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredEnum::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredEnum::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredEnum::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline foo::TestEnum TestMessRequiredEnum::test() const {
  return static_cast< foo::TestEnum >(test_);
}
inline void TestMessRequiredEnum::set_test(foo::TestEnum value) {
  GOOGLE_DCHECK(foo::TestEnum_IsValid(value));
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredEnumSmall

// required .foo.TestEnumSmall test = 1;
inline bool TestMessRequiredEnumSmall::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredEnumSmall::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredEnumSmall::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredEnumSmall::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline foo::TestEnumSmall TestMessRequiredEnumSmall::test() const {
  return static_cast< foo::TestEnumSmall >(test_);
}
inline void TestMessRequiredEnumSmall::set_test(foo::TestEnumSmall value) {
  GOOGLE_DCHECK(foo::TestEnumSmall_IsValid(value));
  set_has_test();
  test_ = value;
}

// -------------------------------------------------------------------

// TestMessRequiredString

// required string test = 1;
inline bool TestMessRequiredString::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredString::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredString::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredString::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestMessRequiredString::test() const {
  return *test_;
}
inline void TestMessRequiredString::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestMessRequiredString::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestMessRequiredString::set_test(const char* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessRequiredString::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestMessRequiredString::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMessRequiredBytes

// required bytes test = 1;
inline bool TestMessRequiredBytes::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredBytes::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredBytes::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredBytes::clear_test() {
  if (test_ != &::google::protobuf::internal::kEmptyString) {
    test_->clear();
  }
  clear_has_test();
}
inline const ::std::string& TestMessRequiredBytes::test() const {
  return *test_;
}
inline void TestMessRequiredBytes::set_test(const ::std::string& value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestMessRequiredBytes::set_test(const char* value) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(value);
}
inline void TestMessRequiredBytes::set_test(const void* value, size_t size) {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  test_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessRequiredBytes::mutable_test() {
  set_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    test_ = new ::std::string;
  }
  return test_;
}
inline ::std::string* TestMessRequiredBytes::release_test() {
  clear_has_test();
  if (test_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_;
    test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMessRequiredMessage

// required .foo.SubMess test = 1;
inline bool TestMessRequiredMessage::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessRequiredMessage::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessRequiredMessage::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessRequiredMessage::clear_test() {
  if (test_ != NULL) test_->::foo::SubMess::Clear();
  clear_has_test();
}
inline const ::foo::SubMess& TestMessRequiredMessage::test() const {
  return test_ != NULL ? *test_ : *default_instance_->test_;
}
inline ::foo::SubMess* TestMessRequiredMessage::mutable_test() {
  set_has_test();
  if (test_ == NULL) test_ = new ::foo::SubMess;
  return test_;
}
inline ::foo::SubMess* TestMessRequiredMessage::release_test() {
  clear_has_test();
  ::foo::SubMess* temp = test_;
  test_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EmptyMess

// -------------------------------------------------------------------

// DefaultRequiredValues

// required int32 v_int32 = 1 [default = -42];
inline bool DefaultRequiredValues::has_v_int32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DefaultRequiredValues::set_has_v_int32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DefaultRequiredValues::clear_has_v_int32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DefaultRequiredValues::clear_v_int32() {
  v_int32_ = -42;
  clear_has_v_int32();
}
inline ::google::protobuf::int32 DefaultRequiredValues::v_int32() const {
  return v_int32_;
}
inline void DefaultRequiredValues::set_v_int32(::google::protobuf::int32 value) {
  set_has_v_int32();
  v_int32_ = value;
}

// required uint32 v_uint32 = 2 [default = 666];
inline bool DefaultRequiredValues::has_v_uint32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DefaultRequiredValues::set_has_v_uint32() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DefaultRequiredValues::clear_has_v_uint32() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DefaultRequiredValues::clear_v_uint32() {
  v_uint32_ = 666u;
  clear_has_v_uint32();
}
inline ::google::protobuf::uint32 DefaultRequiredValues::v_uint32() const {
  return v_uint32_;
}
inline void DefaultRequiredValues::set_v_uint32(::google::protobuf::uint32 value) {
  set_has_v_uint32();
  v_uint32_ = value;
}

// required int32 v_int64 = 3 [default = 100000];
inline bool DefaultRequiredValues::has_v_int64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DefaultRequiredValues::set_has_v_int64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DefaultRequiredValues::clear_has_v_int64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DefaultRequiredValues::clear_v_int64() {
  v_int64_ = 100000;
  clear_has_v_int64();
}
inline ::google::protobuf::int32 DefaultRequiredValues::v_int64() const {
  return v_int64_;
}
inline void DefaultRequiredValues::set_v_int64(::google::protobuf::int32 value) {
  set_has_v_int64();
  v_int64_ = value;
}

// required uint32 v_uint64 = 4 [default = 100001];
inline bool DefaultRequiredValues::has_v_uint64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DefaultRequiredValues::set_has_v_uint64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DefaultRequiredValues::clear_has_v_uint64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DefaultRequiredValues::clear_v_uint64() {
  v_uint64_ = 100001u;
  clear_has_v_uint64();
}
inline ::google::protobuf::uint32 DefaultRequiredValues::v_uint64() const {
  return v_uint64_;
}
inline void DefaultRequiredValues::set_v_uint64(::google::protobuf::uint32 value) {
  set_has_v_uint64();
  v_uint64_ = value;
}

// required float v_float = 5 [default = 2.5];
inline bool DefaultRequiredValues::has_v_float() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DefaultRequiredValues::set_has_v_float() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DefaultRequiredValues::clear_has_v_float() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DefaultRequiredValues::clear_v_float() {
  v_float_ = 2.5f;
  clear_has_v_float();
}
inline float DefaultRequiredValues::v_float() const {
  return v_float_;
}
inline void DefaultRequiredValues::set_v_float(float value) {
  set_has_v_float();
  v_float_ = value;
}

// required double v_double = 6 [default = 4.5];
inline bool DefaultRequiredValues::has_v_double() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DefaultRequiredValues::set_has_v_double() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DefaultRequiredValues::clear_has_v_double() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DefaultRequiredValues::clear_v_double() {
  v_double_ = 4.5;
  clear_has_v_double();
}
inline double DefaultRequiredValues::v_double() const {
  return v_double_;
}
inline void DefaultRequiredValues::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
}

// required string v_string = 7 [default = "hi mom\n"];
inline bool DefaultRequiredValues::has_v_string() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DefaultRequiredValues::set_has_v_string() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DefaultRequiredValues::clear_has_v_string() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DefaultRequiredValues::clear_v_string() {
  if (v_string_ != &_default_v_string_) {
    v_string_->assign(_default_v_string_);
  }
  clear_has_v_string();
}
inline const ::std::string& DefaultRequiredValues::v_string() const {
  return *v_string_;
}
inline void DefaultRequiredValues::set_v_string(const ::std::string& value) {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(value);
}
inline void DefaultRequiredValues::set_v_string(const char* value) {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(value);
}
inline void DefaultRequiredValues::set_v_string(const char* value, size_t size) {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DefaultRequiredValues::mutable_v_string() {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string(_default_v_string_);
  }
  return v_string_;
}
inline ::std::string* DefaultRequiredValues::release_v_string() {
  clear_has_v_string();
  if (v_string_ == &_default_v_string_) {
    return NULL;
  } else {
    ::std::string* temp = v_string_;
    v_string_ = const_cast< ::std::string*>(&_default_v_string_);
    return temp;
  }
}

// required bytes v_bytes = 8 [default = "a \000 character"];
inline bool DefaultRequiredValues::has_v_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DefaultRequiredValues::set_has_v_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DefaultRequiredValues::clear_has_v_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DefaultRequiredValues::clear_v_bytes() {
  if (v_bytes_ != &_default_v_bytes_) {
    v_bytes_->assign(_default_v_bytes_);
  }
  clear_has_v_bytes();
}
inline const ::std::string& DefaultRequiredValues::v_bytes() const {
  return *v_bytes_;
}
inline void DefaultRequiredValues::set_v_bytes(const ::std::string& value) {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(value);
}
inline void DefaultRequiredValues::set_v_bytes(const char* value) {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(value);
}
inline void DefaultRequiredValues::set_v_bytes(const void* value, size_t size) {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DefaultRequiredValues::mutable_v_bytes() {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string(_default_v_bytes_);
  }
  return v_bytes_;
}
inline ::std::string* DefaultRequiredValues::release_v_bytes() {
  clear_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    return NULL;
  } else {
    ::std::string* temp = v_bytes_;
    v_bytes_ = const_cast< ::std::string*>(&_default_v_bytes_);
    return temp;
  }
}

// -------------------------------------------------------------------

// DefaultOptionalValues

// optional int32 v_int32 = 1 [default = -42];
inline bool DefaultOptionalValues::has_v_int32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DefaultOptionalValues::set_has_v_int32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DefaultOptionalValues::clear_has_v_int32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DefaultOptionalValues::clear_v_int32() {
  v_int32_ = -42;
  clear_has_v_int32();
}
inline ::google::protobuf::int32 DefaultOptionalValues::v_int32() const {
  return v_int32_;
}
inline void DefaultOptionalValues::set_v_int32(::google::protobuf::int32 value) {
  set_has_v_int32();
  v_int32_ = value;
}

// optional uint32 v_uint32 = 2 [default = 666];
inline bool DefaultOptionalValues::has_v_uint32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DefaultOptionalValues::set_has_v_uint32() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DefaultOptionalValues::clear_has_v_uint32() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DefaultOptionalValues::clear_v_uint32() {
  v_uint32_ = 666u;
  clear_has_v_uint32();
}
inline ::google::protobuf::uint32 DefaultOptionalValues::v_uint32() const {
  return v_uint32_;
}
inline void DefaultOptionalValues::set_v_uint32(::google::protobuf::uint32 value) {
  set_has_v_uint32();
  v_uint32_ = value;
}

// optional int32 v_int64 = 3 [default = 100000];
inline bool DefaultOptionalValues::has_v_int64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DefaultOptionalValues::set_has_v_int64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DefaultOptionalValues::clear_has_v_int64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DefaultOptionalValues::clear_v_int64() {
  v_int64_ = 100000;
  clear_has_v_int64();
}
inline ::google::protobuf::int32 DefaultOptionalValues::v_int64() const {
  return v_int64_;
}
inline void DefaultOptionalValues::set_v_int64(::google::protobuf::int32 value) {
  set_has_v_int64();
  v_int64_ = value;
}

// optional uint32 v_uint64 = 4 [default = 100001];
inline bool DefaultOptionalValues::has_v_uint64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DefaultOptionalValues::set_has_v_uint64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DefaultOptionalValues::clear_has_v_uint64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DefaultOptionalValues::clear_v_uint64() {
  v_uint64_ = 100001u;
  clear_has_v_uint64();
}
inline ::google::protobuf::uint32 DefaultOptionalValues::v_uint64() const {
  return v_uint64_;
}
inline void DefaultOptionalValues::set_v_uint64(::google::protobuf::uint32 value) {
  set_has_v_uint64();
  v_uint64_ = value;
}

// optional float v_float = 5 [default = 2.5];
inline bool DefaultOptionalValues::has_v_float() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DefaultOptionalValues::set_has_v_float() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DefaultOptionalValues::clear_has_v_float() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DefaultOptionalValues::clear_v_float() {
  v_float_ = 2.5f;
  clear_has_v_float();
}
inline float DefaultOptionalValues::v_float() const {
  return v_float_;
}
inline void DefaultOptionalValues::set_v_float(float value) {
  set_has_v_float();
  v_float_ = value;
}

// optional double v_double = 6 [default = 4.5];
inline bool DefaultOptionalValues::has_v_double() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DefaultOptionalValues::set_has_v_double() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DefaultOptionalValues::clear_has_v_double() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DefaultOptionalValues::clear_v_double() {
  v_double_ = 4.5;
  clear_has_v_double();
}
inline double DefaultOptionalValues::v_double() const {
  return v_double_;
}
inline void DefaultOptionalValues::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
}

// optional string v_string = 7 [default = "hi mom\n"];
inline bool DefaultOptionalValues::has_v_string() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DefaultOptionalValues::set_has_v_string() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DefaultOptionalValues::clear_has_v_string() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DefaultOptionalValues::clear_v_string() {
  if (v_string_ != &_default_v_string_) {
    v_string_->assign(_default_v_string_);
  }
  clear_has_v_string();
}
inline const ::std::string& DefaultOptionalValues::v_string() const {
  return *v_string_;
}
inline void DefaultOptionalValues::set_v_string(const ::std::string& value) {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(value);
}
inline void DefaultOptionalValues::set_v_string(const char* value) {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(value);
}
inline void DefaultOptionalValues::set_v_string(const char* value, size_t size) {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string;
  }
  v_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DefaultOptionalValues::mutable_v_string() {
  set_has_v_string();
  if (v_string_ == &_default_v_string_) {
    v_string_ = new ::std::string(_default_v_string_);
  }
  return v_string_;
}
inline ::std::string* DefaultOptionalValues::release_v_string() {
  clear_has_v_string();
  if (v_string_ == &_default_v_string_) {
    return NULL;
  } else {
    ::std::string* temp = v_string_;
    v_string_ = const_cast< ::std::string*>(&_default_v_string_);
    return temp;
  }
}

// optional bytes v_bytes = 8 [default = "a \000 character"];
inline bool DefaultOptionalValues::has_v_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DefaultOptionalValues::set_has_v_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DefaultOptionalValues::clear_has_v_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DefaultOptionalValues::clear_v_bytes() {
  if (v_bytes_ != &_default_v_bytes_) {
    v_bytes_->assign(_default_v_bytes_);
  }
  clear_has_v_bytes();
}
inline const ::std::string& DefaultOptionalValues::v_bytes() const {
  return *v_bytes_;
}
inline void DefaultOptionalValues::set_v_bytes(const ::std::string& value) {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(value);
}
inline void DefaultOptionalValues::set_v_bytes(const char* value) {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(value);
}
inline void DefaultOptionalValues::set_v_bytes(const void* value, size_t size) {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string;
  }
  v_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DefaultOptionalValues::mutable_v_bytes() {
  set_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    v_bytes_ = new ::std::string(_default_v_bytes_);
  }
  return v_bytes_;
}
inline ::std::string* DefaultOptionalValues::release_v_bytes() {
  clear_has_v_bytes();
  if (v_bytes_ == &_default_v_bytes_) {
    return NULL;
  } else {
    ::std::string* temp = v_bytes_;
    v_bytes_ = const_cast< ::std::string*>(&_default_v_bytes_);
    return temp;
  }
}

// -------------------------------------------------------------------

// AllocValues

// optional bytes o_bytes = 1;
inline bool AllocValues::has_o_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllocValues::set_has_o_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllocValues::clear_has_o_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllocValues::clear_o_bytes() {
  if (o_bytes_ != &::google::protobuf::internal::kEmptyString) {
    o_bytes_->clear();
  }
  clear_has_o_bytes();
}
inline const ::std::string& AllocValues::o_bytes() const {
  return *o_bytes_;
}
inline void AllocValues::set_o_bytes(const ::std::string& value) {
  set_has_o_bytes();
  if (o_bytes_ == &::google::protobuf::internal::kEmptyString) {
    o_bytes_ = new ::std::string;
  }
  o_bytes_->assign(value);
}
inline void AllocValues::set_o_bytes(const char* value) {
  set_has_o_bytes();
  if (o_bytes_ == &::google::protobuf::internal::kEmptyString) {
    o_bytes_ = new ::std::string;
  }
  o_bytes_->assign(value);
}
inline void AllocValues::set_o_bytes(const void* value, size_t size) {
  set_has_o_bytes();
  if (o_bytes_ == &::google::protobuf::internal::kEmptyString) {
    o_bytes_ = new ::std::string;
  }
  o_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllocValues::mutable_o_bytes() {
  set_has_o_bytes();
  if (o_bytes_ == &::google::protobuf::internal::kEmptyString) {
    o_bytes_ = new ::std::string;
  }
  return o_bytes_;
}
inline ::std::string* AllocValues::release_o_bytes() {
  clear_has_o_bytes();
  if (o_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = o_bytes_;
    o_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string r_string = 2;
inline int AllocValues::r_string_size() const {
  return r_string_.size();
}
inline void AllocValues::clear_r_string() {
  r_string_.Clear();
}
inline const ::std::string& AllocValues::r_string(int index) const {
  return r_string_.Get(index);
}
inline ::std::string* AllocValues::mutable_r_string(int index) {
  return r_string_.Mutable(index);
}
inline void AllocValues::set_r_string(int index, const ::std::string& value) {
  r_string_.Mutable(index)->assign(value);
}
inline void AllocValues::set_r_string(int index, const char* value) {
  r_string_.Mutable(index)->assign(value);
}
inline void AllocValues::set_r_string(int index, const char* value, size_t size) {
  r_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllocValues::add_r_string() {
  return r_string_.Add();
}
inline void AllocValues::add_r_string(const ::std::string& value) {
  r_string_.Add()->assign(value);
}
inline void AllocValues::add_r_string(const char* value) {
  r_string_.Add()->assign(value);
}
inline void AllocValues::add_r_string(const char* value, size_t size) {
  r_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AllocValues::r_string() const {
  return r_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AllocValues::mutable_r_string() {
  return &r_string_;
}

// required string a_string = 3;
inline bool AllocValues::has_a_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllocValues::set_has_a_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllocValues::clear_has_a_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllocValues::clear_a_string() {
  if (a_string_ != &::google::protobuf::internal::kEmptyString) {
    a_string_->clear();
  }
  clear_has_a_string();
}
inline const ::std::string& AllocValues::a_string() const {
  return *a_string_;
}
inline void AllocValues::set_a_string(const ::std::string& value) {
  set_has_a_string();
  if (a_string_ == &::google::protobuf::internal::kEmptyString) {
    a_string_ = new ::std::string;
  }
  a_string_->assign(value);
}
inline void AllocValues::set_a_string(const char* value) {
  set_has_a_string();
  if (a_string_ == &::google::protobuf::internal::kEmptyString) {
    a_string_ = new ::std::string;
  }
  a_string_->assign(value);
}
inline void AllocValues::set_a_string(const char* value, size_t size) {
  set_has_a_string();
  if (a_string_ == &::google::protobuf::internal::kEmptyString) {
    a_string_ = new ::std::string;
  }
  a_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllocValues::mutable_a_string() {
  set_has_a_string();
  if (a_string_ == &::google::protobuf::internal::kEmptyString) {
    a_string_ = new ::std::string;
  }
  return a_string_;
}
inline ::std::string* AllocValues::release_a_string() {
  clear_has_a_string();
  if (a_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = a_string_;
    a_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes a_bytes = 4;
inline bool AllocValues::has_a_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllocValues::set_has_a_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllocValues::clear_has_a_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllocValues::clear_a_bytes() {
  if (a_bytes_ != &::google::protobuf::internal::kEmptyString) {
    a_bytes_->clear();
  }
  clear_has_a_bytes();
}
inline const ::std::string& AllocValues::a_bytes() const {
  return *a_bytes_;
}
inline void AllocValues::set_a_bytes(const ::std::string& value) {
  set_has_a_bytes();
  if (a_bytes_ == &::google::protobuf::internal::kEmptyString) {
    a_bytes_ = new ::std::string;
  }
  a_bytes_->assign(value);
}
inline void AllocValues::set_a_bytes(const char* value) {
  set_has_a_bytes();
  if (a_bytes_ == &::google::protobuf::internal::kEmptyString) {
    a_bytes_ = new ::std::string;
  }
  a_bytes_->assign(value);
}
inline void AllocValues::set_a_bytes(const void* value, size_t size) {
  set_has_a_bytes();
  if (a_bytes_ == &::google::protobuf::internal::kEmptyString) {
    a_bytes_ = new ::std::string;
  }
  a_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllocValues::mutable_a_bytes() {
  set_has_a_bytes();
  if (a_bytes_ == &::google::protobuf::internal::kEmptyString) {
    a_bytes_ = new ::std::string;
  }
  return a_bytes_;
}
inline ::std::string* AllocValues::release_a_bytes() {
  clear_has_a_bytes();
  if (a_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = a_bytes_;
    a_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .foo.DefaultRequiredValues a_mess = 5;
inline bool AllocValues::has_a_mess() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllocValues::set_has_a_mess() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllocValues::clear_has_a_mess() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllocValues::clear_a_mess() {
  if (a_mess_ != NULL) a_mess_->::foo::DefaultRequiredValues::Clear();
  clear_has_a_mess();
}
inline const ::foo::DefaultRequiredValues& AllocValues::a_mess() const {
  return a_mess_ != NULL ? *a_mess_ : *default_instance_->a_mess_;
}
inline ::foo::DefaultRequiredValues* AllocValues::mutable_a_mess() {
  set_has_a_mess();
  if (a_mess_ == NULL) a_mess_ = new ::foo::DefaultRequiredValues;
  return a_mess_;
}
inline ::foo::DefaultRequiredValues* AllocValues::release_a_mess() {
  clear_has_a_mess();
  ::foo::DefaultRequiredValues* temp = a_mess_;
  a_mess_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace foo

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< foo::TestEnumSmall>() {
  return foo::TestEnumSmall_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< foo::TestEnum>() {
  return foo::TestEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< foo::TestEnumDupValues>() {
  return foo::TestEnumDupValues_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2dfull_2eproto__INCLUDED
